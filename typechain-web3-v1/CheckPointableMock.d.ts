/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreatedTotalSupplyCache = ContractEventLog<{
  _blockNumber: string;
  0: string;
}>;

export interface CheckPointableMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CheckPointableMock;
  clone(): CheckPointableMock;
  methods: {
    balanceHistoryCleanup(
      _owner: string,
      _count: number | string | BN
    ): NonPayableTransactionObject<string>;

    balanceOfAt(
      _owner: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    burnForAtNow(
      _owner: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    getCleanupBlockNumber(): NonPayableTransactionObject<string>;

    mintForAtNow(
      _owner: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCleanupBlockNumber(
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<void>;

    totalSupplyAt(
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupplyCacheCleanup(
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupplyHistoryCleanup(
      _count: number | string | BN
    ): NonPayableTransactionObject<string>;

    transmitAtNow(
      from: string,
      to: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CreatedTotalSupplyCache(
      cb?: Callback<CreatedTotalSupplyCache>
    ): EventEmitter;
    CreatedTotalSupplyCache(
      options?: EventOptions,
      cb?: Callback<CreatedTotalSupplyCache>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "CreatedTotalSupplyCache",
    cb: Callback<CreatedTotalSupplyCache>
  ): void;
  once(
    event: "CreatedTotalSupplyCache",
    options: EventOptions,
    cb: Callback<CreatedTotalSupplyCache>
  ): void;
}
