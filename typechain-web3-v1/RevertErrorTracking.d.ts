/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractRevertError = ContractEventLog<{
  theContract: string;
  atBlock: string;
  theMessage: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RevertErrorTracking extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RevertErrorTracking;
  clone(): RevertErrorTracking;
  methods: {
    addRevertError(
      revertedContract: string,
      message: string
    ): NonPayableTransactionObject<void>;

    errorData(): NonPayableTransactionObject<{
      totalRevertedErrors: string;
      lastErrorTypeIndex: string;
      0: string;
      1: string;
    }>;

    showLastRevertedError(): NonPayableTransactionObject<{
      _lastErrorBlock: string[];
      _numErrors: string[];
      _errorString: string[];
      _erroringContract: string[];
      _totalRevertedErrors: string;
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string;
    }>;

    showRevertedErrors(
      startIndex: number | string | BN,
      numErrorTypesToShow: number | string | BN
    ): NonPayableTransactionObject<{
      _lastErrorBlock: string[];
      _numErrors: string[];
      _errorString: string[];
      _erroringContract: string[];
      _totalRevertedErrors: string;
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string;
    }>;
  };
  events: {
    ContractRevertError(cb?: Callback<ContractRevertError>): EventEmitter;
    ContractRevertError(
      options?: EventOptions,
      cb?: Callback<ContractRevertError>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ContractRevertError", cb: Callback<ContractRevertError>): void;
  once(
    event: "ContractRevertError",
    options: EventOptions,
    cb: Callback<ContractRevertError>
  ): void;
}
