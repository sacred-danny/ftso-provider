/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AbsoluteThresholdSet = ContractEventLog<{
  oldAbsoluteThreshold: string;
  newAbsoluteThreshold: string;
  0: string;
  1: string;
}>;
export type ExecutionDelaySet = ContractEventLog<{
  oldExecutionDelay: string;
  newExecutionDelay: string;
  0: string;
  1: string;
}>;
export type ExecutionPeriodSet = ContractEventLog<{
  oldExecutionPeriod: string;
  newExecutionPeriod: string;
  0: string;
  1: string;
}>;
export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type ProposalCreated = ContractEventLog<{
  proposalId: string;
  proposer: string;
  targets: string[];
  values: string[];
  signatures: string[];
  calldatas: string[];
  startTime: string;
  endTime: string;
  description: string;
  votePowerBlock: string;
  wrappingThreshold: string;
  absoluteThreshold: string;
  relativeThreshold: string;
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
  5: string[];
  6: string;
  7: string;
  8: string;
  9: string;
  10: string;
  11: string;
  12: string;
}>;
export type ProposalExecuted = ContractEventLog<{
  proposalId: string;
  0: string;
}>;
export type ProposalThresholdSet = ContractEventLog<{
  oldProposalThreshold: string;
  newProposalThreshold: string;
  0: string;
  1: string;
}>;
export type RelativeThresholdSet = ContractEventLog<{
  oldRelativeThreshold: string;
  newRelativeThreshold: string;
  0: string;
  1: string;
}>;
export type VoteCast = ContractEventLog<{
  voter: string;
  proposalId: string;
  support: string;
  weight: string;
  reason: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type VotePowerLifeTimeDaysSet = ContractEventLog<{
  oldVotePowerLifeTimeDays: string;
  newVotePowerLifeTimeDays: string;
  0: string;
  1: string;
}>;
export type VotingDelaySet = ContractEventLog<{
  oldVotingDelay: string;
  newVotingDelay: string;
  0: string;
  1: string;
}>;
export type VotingPeriodSet = ContractEventLog<{
  oldVotingPeriod: string;
  newVotingPeriod: string;
  0: string;
  1: string;
}>;
export type VpBlockPeriodSecondsSet = ContractEventLog<{
  oldVpBlockPeriodSeconds: string;
  newVpBlockPeriodSeconds: string;
  0: string;
  1: string;
}>;
export type WrappingThresholdSet = ContractEventLog<{
  oldWrappingThreshold: string;
  newWrappingThreshold: string;
  0: string;
  1: string;
}>;

export interface PollingAccept extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PollingAccept;
  clone(): PollingAccept;
  methods: {
    BALLOT_TYPEHASH(): NonPayableTransactionObject<string>;

    absoluteThreshold(): NonPayableTransactionObject<string>;

    castVote(
      _proposalId: number | string | BN,
      _support: number | string | BN
    ): NonPayableTransactionObject<string>;

    castVoteBySig(
      _proposalId: number | string | BN,
      _support: number | string | BN,
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<string>;

    castVoteWithReason(
      _proposalId: number | string | BN,
      _support: number | string | BN,
      _reason: string
    ): NonPayableTransactionObject<string>;

    chainId(): NonPayableTransactionObject<string>;

    claimGovernance(): NonPayableTransactionObject<void>;

    "execute(address[],uint256[],bytes[],bytes32)"(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _descriptionHash: string | number[]
    ): PayableTransactionObject<string>;

    "execute(string)"(
      _description: string
    ): NonPayableTransactionObject<string>;

    executionDelay(): NonPayableTransactionObject<string>;

    executionPeriod(): NonPayableTransactionObject<string>;

    ftsoManager(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getProposalId(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _descriptionHash: string | number[]
    ): NonPayableTransactionObject<string>;

    getProposalInfo(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<{
      _proposer: string;
      _votePowerBlock: string;
      _voteStartTime: string;
      _voteEndTime: string;
      _execStartTime: string;
      _execEndTime: string;
      _executed: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    getProposalVP(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<{
      _totalVP: string;
      _for: string;
      _against: string;
      _abstain: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    getVotePowerLifeTimeDays(): NonPayableTransactionObject<string>;

    getVotes(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVpBlockPeriodSeconds(): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    hasVoted(
      _proposalId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<boolean>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    priceSubmitter(): NonPayableTransactionObject<string>;

    proposalThreshold(): NonPayableTransactionObject<string>;

    "propose(address[],uint256[],bytes[],string)"(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _description: string
    ): NonPayableTransactionObject<string>;

    "propose(string)"(
      _description: string
    ): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    quorum(
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    relativeThreshold(): NonPayableTransactionObject<string>;

    setAbsoluteThreshold(
      _absoluteThresholdBIPS: number | string | BN
    ): NonPayableTransactionObject<void>;

    setExecutionDelay(
      _executionDelaySeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    setExecutionPeriod(
      _executionPeriodSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    setProposalThreshold(
      _proposalThresholdBIPS: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRelativeThreshold(
      _relativeThresholdBIPS: number | string | BN
    ): NonPayableTransactionObject<void>;

    setVotePowerLifeTimeDays(
      _votePowerLifeTimeDays: number | string | BN
    ): NonPayableTransactionObject<void>;

    setVotingDelay(
      _votingDelaySeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    setVotingPeriod(
      _votingPeriodSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    setVpBlockPeriodSeconds(
      _vpBlockPeriodSeconds: number | string | BN
    ): NonPayableTransactionObject<void>;

    setWrappingThreshold(
      _wrappingThresholdBIPS: number | string | BN
    ): NonPayableTransactionObject<void>;

    state(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<string>;

    supply(): NonPayableTransactionObject<string>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    votePower(): NonPayableTransactionObject<string>;

    votingDelay(): NonPayableTransactionObject<string>;

    votingPeriod(): NonPayableTransactionObject<string>;

    wrappingThreshold(): NonPayableTransactionObject<string>;
  };
  events: {
    AbsoluteThresholdSet(cb?: Callback<AbsoluteThresholdSet>): EventEmitter;
    AbsoluteThresholdSet(
      options?: EventOptions,
      cb?: Callback<AbsoluteThresholdSet>
    ): EventEmitter;

    ExecutionDelaySet(cb?: Callback<ExecutionDelaySet>): EventEmitter;
    ExecutionDelaySet(
      options?: EventOptions,
      cb?: Callback<ExecutionDelaySet>
    ): EventEmitter;

    ExecutionPeriodSet(cb?: Callback<ExecutionPeriodSet>): EventEmitter;
    ExecutionPeriodSet(
      options?: EventOptions,
      cb?: Callback<ExecutionPeriodSet>
    ): EventEmitter;

    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter;
    ProposalCreated(
      options?: EventOptions,
      cb?: Callback<ProposalCreated>
    ): EventEmitter;

    ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter;
    ProposalExecuted(
      options?: EventOptions,
      cb?: Callback<ProposalExecuted>
    ): EventEmitter;

    ProposalThresholdSet(cb?: Callback<ProposalThresholdSet>): EventEmitter;
    ProposalThresholdSet(
      options?: EventOptions,
      cb?: Callback<ProposalThresholdSet>
    ): EventEmitter;

    RelativeThresholdSet(cb?: Callback<RelativeThresholdSet>): EventEmitter;
    RelativeThresholdSet(
      options?: EventOptions,
      cb?: Callback<RelativeThresholdSet>
    ): EventEmitter;

    VoteCast(cb?: Callback<VoteCast>): EventEmitter;
    VoteCast(options?: EventOptions, cb?: Callback<VoteCast>): EventEmitter;

    VotePowerLifeTimeDaysSet(
      cb?: Callback<VotePowerLifeTimeDaysSet>
    ): EventEmitter;
    VotePowerLifeTimeDaysSet(
      options?: EventOptions,
      cb?: Callback<VotePowerLifeTimeDaysSet>
    ): EventEmitter;

    VotingDelaySet(cb?: Callback<VotingDelaySet>): EventEmitter;
    VotingDelaySet(
      options?: EventOptions,
      cb?: Callback<VotingDelaySet>
    ): EventEmitter;

    VotingPeriodSet(cb?: Callback<VotingPeriodSet>): EventEmitter;
    VotingPeriodSet(
      options?: EventOptions,
      cb?: Callback<VotingPeriodSet>
    ): EventEmitter;

    VpBlockPeriodSecondsSet(
      cb?: Callback<VpBlockPeriodSecondsSet>
    ): EventEmitter;
    VpBlockPeriodSecondsSet(
      options?: EventOptions,
      cb?: Callback<VpBlockPeriodSecondsSet>
    ): EventEmitter;

    WrappingThresholdSet(cb?: Callback<WrappingThresholdSet>): EventEmitter;
    WrappingThresholdSet(
      options?: EventOptions,
      cb?: Callback<WrappingThresholdSet>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AbsoluteThresholdSet", cb: Callback<AbsoluteThresholdSet>): void;
  once(
    event: "AbsoluteThresholdSet",
    options: EventOptions,
    cb: Callback<AbsoluteThresholdSet>
  ): void;

  once(event: "ExecutionDelaySet", cb: Callback<ExecutionDelaySet>): void;
  once(
    event: "ExecutionDelaySet",
    options: EventOptions,
    cb: Callback<ExecutionDelaySet>
  ): void;

  once(event: "ExecutionPeriodSet", cb: Callback<ExecutionPeriodSet>): void;
  once(
    event: "ExecutionPeriodSet",
    options: EventOptions,
    cb: Callback<ExecutionPeriodSet>
  ): void;

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(event: "ProposalCreated", cb: Callback<ProposalCreated>): void;
  once(
    event: "ProposalCreated",
    options: EventOptions,
    cb: Callback<ProposalCreated>
  ): void;

  once(event: "ProposalExecuted", cb: Callback<ProposalExecuted>): void;
  once(
    event: "ProposalExecuted",
    options: EventOptions,
    cb: Callback<ProposalExecuted>
  ): void;

  once(event: "ProposalThresholdSet", cb: Callback<ProposalThresholdSet>): void;
  once(
    event: "ProposalThresholdSet",
    options: EventOptions,
    cb: Callback<ProposalThresholdSet>
  ): void;

  once(event: "RelativeThresholdSet", cb: Callback<RelativeThresholdSet>): void;
  once(
    event: "RelativeThresholdSet",
    options: EventOptions,
    cb: Callback<RelativeThresholdSet>
  ): void;

  once(event: "VoteCast", cb: Callback<VoteCast>): void;
  once(event: "VoteCast", options: EventOptions, cb: Callback<VoteCast>): void;

  once(
    event: "VotePowerLifeTimeDaysSet",
    cb: Callback<VotePowerLifeTimeDaysSet>
  ): void;
  once(
    event: "VotePowerLifeTimeDaysSet",
    options: EventOptions,
    cb: Callback<VotePowerLifeTimeDaysSet>
  ): void;

  once(event: "VotingDelaySet", cb: Callback<VotingDelaySet>): void;
  once(
    event: "VotingDelaySet",
    options: EventOptions,
    cb: Callback<VotingDelaySet>
  ): void;

  once(event: "VotingPeriodSet", cb: Callback<VotingPeriodSet>): void;
  once(
    event: "VotingPeriodSet",
    options: EventOptions,
    cb: Callback<VotingPeriodSet>
  ): void;

  once(
    event: "VpBlockPeriodSecondsSet",
    cb: Callback<VpBlockPeriodSecondsSet>
  ): void;
  once(
    event: "VpBlockPeriodSecondsSet",
    options: EventOptions,
    cb: Callback<VpBlockPeriodSecondsSet>
  ): void;

  once(event: "WrappingThresholdSet", cb: Callback<WrappingThresholdSet>): void;
  once(
    event: "WrappingThresholdSet",
    options: EventOptions,
    cb: Callback<WrappingThresholdSet>
  ): void;
}
