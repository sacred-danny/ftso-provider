/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type InflationAllocationSet = ContractEventLog<{
  inflationAllocation: string;
  0: string;
}>;
export type InflationAuthorized = ContractEventLog<{
  amountWei: string;
  0: string;
}>;
export type MintingReceived = ContractEventLog<{
  amountWei: string;
  selfDestructAmountWei: string;
  0: string;
  1: string;
}>;
export type NewAnnumInitialized = ContractEventLog<{
  startTimeStamp: string;
  endTimeStamp: string;
  inflatableSupplyWei: string;
  recognizedInflationWei: string;
  totalAuthorizedInflationWei: string;
  totalInflationTopupRequestedWei: string;
  totalInflationTopupReceivedWei: string;
  totalInflationTopupWithdrawnWei: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type RewardServiceDailyAuthorizedInflationComputed = ContractEventLog<{
  inflationReceiver: string;
  amountWei: string;
  0: string;
  1: string;
}>;
export type RewardServiceTopupComputed = ContractEventLog<{
  inflationReceiver: string;
  amountWei: string;
  0: string;
  1: string;
}>;
export type RewardServiceTopupRequestReceived = ContractEventLog<{
  inflationReceiver: string;
  amountWei: string;
  0: string;
  1: string;
}>;
export type SupplySet = ContractEventLog<{
  oldSupply: string;
  newSupply: string;
  0: string;
  1: string;
}>;
export type TopupConfigurationSet = ContractEventLog<{
  topupConfiguration: [string, string, boolean];
  0: [string, string, boolean];
}>;
export type TopupRequested = ContractEventLog<{
  amountWei: string;
  0: string;
}>;

export interface Inflation extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Inflation;
  clone(): Inflation;
  methods: {
    claimGovernance(): NonPayableTransactionObject<void>;

    daemonize(): NonPayableTransactionObject<boolean>;

    flareDaemon(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getAnnum(
      _index: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        [
          [string, string, string, string, string, string][],
          string,
          string,
          string,
          string
        ]
      ]
    >;

    getContractName(): NonPayableTransactionObject<string>;

    getCurrentAnnum(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        [
          [string, string, string, string, string, string][],
          string,
          string,
          string,
          string
        ]
      ]
    >;

    getNextExpectedTopupTs(): NonPayableTransactionObject<string>;

    getTopupConfiguration(
      _inflationReceiver: string
    ): NonPayableTransactionObject<[string, string, boolean]>;

    getTotals(): NonPayableTransactionObject<{
      _totalAuthorizedInflationWei: string;
      _totalInflationTopupRequestedWei: string;
      _totalInflationTopupReceivedWei: string;
      _totalInflationTopupWithdrawnWei: string;
      _totalRecognizedInflationWei: string;
      _totalSelfDestructReceivedWei: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    governance(): NonPayableTransactionObject<string>;

    inflationAllocation(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    lastAuthorizationTs(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    receiveMinting(): PayableTransactionObject<void>;

    rewardEpochStartTs(): NonPayableTransactionObject<string>;

    rewardEpochStartedTs(): NonPayableTransactionObject<string>;

    setTopupConfiguration(
      _inflationReceiver: string,
      _topupType: number | string | BN,
      _topupFactorX100: number | string | BN
    ): NonPayableTransactionObject<void>;

    supply(): NonPayableTransactionObject<string>;

    switchToFallbackMode(): NonPayableTransactionObject<boolean>;

    totalSelfDestructReceivedWei(): NonPayableTransactionObject<string>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    InflationAllocationSet(cb?: Callback<InflationAllocationSet>): EventEmitter;
    InflationAllocationSet(
      options?: EventOptions,
      cb?: Callback<InflationAllocationSet>
    ): EventEmitter;

    InflationAuthorized(cb?: Callback<InflationAuthorized>): EventEmitter;
    InflationAuthorized(
      options?: EventOptions,
      cb?: Callback<InflationAuthorized>
    ): EventEmitter;

    MintingReceived(cb?: Callback<MintingReceived>): EventEmitter;
    MintingReceived(
      options?: EventOptions,
      cb?: Callback<MintingReceived>
    ): EventEmitter;

    NewAnnumInitialized(cb?: Callback<NewAnnumInitialized>): EventEmitter;
    NewAnnumInitialized(
      options?: EventOptions,
      cb?: Callback<NewAnnumInitialized>
    ): EventEmitter;

    RewardServiceDailyAuthorizedInflationComputed(
      cb?: Callback<RewardServiceDailyAuthorizedInflationComputed>
    ): EventEmitter;
    RewardServiceDailyAuthorizedInflationComputed(
      options?: EventOptions,
      cb?: Callback<RewardServiceDailyAuthorizedInflationComputed>
    ): EventEmitter;

    RewardServiceTopupComputed(
      cb?: Callback<RewardServiceTopupComputed>
    ): EventEmitter;
    RewardServiceTopupComputed(
      options?: EventOptions,
      cb?: Callback<RewardServiceTopupComputed>
    ): EventEmitter;

    RewardServiceTopupRequestReceived(
      cb?: Callback<RewardServiceTopupRequestReceived>
    ): EventEmitter;
    RewardServiceTopupRequestReceived(
      options?: EventOptions,
      cb?: Callback<RewardServiceTopupRequestReceived>
    ): EventEmitter;

    SupplySet(cb?: Callback<SupplySet>): EventEmitter;
    SupplySet(options?: EventOptions, cb?: Callback<SupplySet>): EventEmitter;

    TopupConfigurationSet(cb?: Callback<TopupConfigurationSet>): EventEmitter;
    TopupConfigurationSet(
      options?: EventOptions,
      cb?: Callback<TopupConfigurationSet>
    ): EventEmitter;

    TopupRequested(cb?: Callback<TopupRequested>): EventEmitter;
    TopupRequested(
      options?: EventOptions,
      cb?: Callback<TopupRequested>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(
    event: "InflationAllocationSet",
    cb: Callback<InflationAllocationSet>
  ): void;
  once(
    event: "InflationAllocationSet",
    options: EventOptions,
    cb: Callback<InflationAllocationSet>
  ): void;

  once(event: "InflationAuthorized", cb: Callback<InflationAuthorized>): void;
  once(
    event: "InflationAuthorized",
    options: EventOptions,
    cb: Callback<InflationAuthorized>
  ): void;

  once(event: "MintingReceived", cb: Callback<MintingReceived>): void;
  once(
    event: "MintingReceived",
    options: EventOptions,
    cb: Callback<MintingReceived>
  ): void;

  once(event: "NewAnnumInitialized", cb: Callback<NewAnnumInitialized>): void;
  once(
    event: "NewAnnumInitialized",
    options: EventOptions,
    cb: Callback<NewAnnumInitialized>
  ): void;

  once(
    event: "RewardServiceDailyAuthorizedInflationComputed",
    cb: Callback<RewardServiceDailyAuthorizedInflationComputed>
  ): void;
  once(
    event: "RewardServiceDailyAuthorizedInflationComputed",
    options: EventOptions,
    cb: Callback<RewardServiceDailyAuthorizedInflationComputed>
  ): void;

  once(
    event: "RewardServiceTopupComputed",
    cb: Callback<RewardServiceTopupComputed>
  ): void;
  once(
    event: "RewardServiceTopupComputed",
    options: EventOptions,
    cb: Callback<RewardServiceTopupComputed>
  ): void;

  once(
    event: "RewardServiceTopupRequestReceived",
    cb: Callback<RewardServiceTopupRequestReceived>
  ): void;
  once(
    event: "RewardServiceTopupRequestReceived",
    options: EventOptions,
    cb: Callback<RewardServiceTopupRequestReceived>
  ): void;

  once(event: "SupplySet", cb: Callback<SupplySet>): void;
  once(
    event: "SupplySet",
    options: EventOptions,
    cb: Callback<SupplySet>
  ): void;

  once(
    event: "TopupConfigurationSet",
    cb: Callback<TopupConfigurationSet>
  ): void;
  once(
    event: "TopupConfigurationSet",
    options: EventOptions,
    cb: Callback<TopupConfigurationSet>
  ): void;

  once(event: "TopupRequested", cb: Callback<TopupRequested>): void;
  once(
    event: "TopupRequested",
    options: EventOptions,
    cb: Callback<TopupRequested>
  ): void;
}
