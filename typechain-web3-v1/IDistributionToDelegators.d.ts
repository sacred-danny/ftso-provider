/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AccountClaimed = ContractEventLog<{
  whoClaimed: string;
  sentTo: string;
  month: string;
  amountWei: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type AccountOptOut = ContractEventLog<{
  theAccount: string;
  confirmed: boolean;
  0: string;
  1: boolean;
}>;
export type EntitlementStarted = ContractEventLog<{}>;

export interface IDistributionToDelegators extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IDistributionToDelegators;
  clone(): IDistributionToDelegators;
  methods: {
    claim(
      _recipient: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    claimToPersonalDelegationAccount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimableAmount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimableAmountOf(
      account: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimedAmount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimedAmountOf(
      _account: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getCurrentMonth(): NonPayableTransactionObject<string>;

    getMonthToExpireNext(): NonPayableTransactionObject<string>;

    optOutOfAirdrop(): NonPayableTransactionObject<void>;

    secondsTillNextClaim(): NonPayableTransactionObject<string>;
  };
  events: {
    AccountClaimed(cb?: Callback<AccountClaimed>): EventEmitter;
    AccountClaimed(
      options?: EventOptions,
      cb?: Callback<AccountClaimed>
    ): EventEmitter;

    AccountOptOut(cb?: Callback<AccountOptOut>): EventEmitter;
    AccountOptOut(
      options?: EventOptions,
      cb?: Callback<AccountOptOut>
    ): EventEmitter;

    EntitlementStarted(cb?: Callback<EntitlementStarted>): EventEmitter;
    EntitlementStarted(
      options?: EventOptions,
      cb?: Callback<EntitlementStarted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AccountClaimed", cb: Callback<AccountClaimed>): void;
  once(
    event: "AccountClaimed",
    options: EventOptions,
    cb: Callback<AccountClaimed>
  ): void;

  once(event: "AccountOptOut", cb: Callback<AccountOptOut>): void;
  once(
    event: "AccountOptOut",
    options: EventOptions,
    cb: Callback<AccountOptOut>
  ): void;

  once(event: "EntitlementStarted", cb: Callback<EntitlementStarted>): void;
  once(
    event: "EntitlementStarted",
    options: EventOptions,
    cb: Callback<EntitlementStarted>
  ): void;
}
