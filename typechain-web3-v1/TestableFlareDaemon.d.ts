/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractDaemonizeErrored = ContractEventLog<{
  theContract: string;
  atBlock: string;
  theMessage: string;
  gasConsumed: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ContractDaemonized = ContractEventLog<{
  theContract: string;
  gasConsumed: string;
  0: string;
  1: string;
}>;
export type ContractHeldOff = ContractEventLog<{
  theContract: string;
  blockHoldoffsRemaining: string;
  0: string;
  1: string;
}>;
export type ContractsSkippedOutOfGas = ContractEventLog<{
  numberOfSkippedConstracts: string;
  0: string;
}>;
export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type InflationSet = ContractEventLog<{
  theNewContract: string;
  theOldContract: string;
  0: string;
  1: string;
}>;
export type MintingReceived = ContractEventLog<{
  amountWei: string;
  0: string;
}>;
export type MintingRequestReceived = ContractEventLog<{
  amountWei: string;
  0: string;
}>;
export type MintingRequestTriggered = ContractEventLog<{
  amountWei: string;
  0: string;
}>;
export type MintingWithdrawn = ContractEventLog<{
  amountWei: string;
  0: string;
}>;
export type RegistrationUpdated = ContractEventLog<{
  theContract: string;
  add: boolean;
  0: string;
  1: boolean;
}>;
export type SelfDestructReceived = ContractEventLog<{
  amountWei: string;
  0: string;
}>;

export interface TestableFlareDaemon extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TestableFlareDaemon;
  clone(): TestableFlareDaemon;
  methods: {
    blockHoldoff(): NonPayableTransactionObject<string>;

    claimGovernance(): NonPayableTransactionObject<void>;

    errorData(): NonPayableTransactionObject<{
      totalDaemonizedErrors: string;
      lastErrorTypeIndex: string;
      0: string;
      1: string;
    }>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getDaemonizedContractsData(): NonPayableTransactionObject<{
      _daemonizeContracts: string[];
      _gasLimits: string[];
      _blockHoldoffsRemaining: string[];
      0: string[];
      1: string[];
      2: string[];
    }>;

    getNextMintRequestAllowedTs(): NonPayableTransactionObject<string>;

    governance(): NonPayableTransactionObject<string>;

    inflation(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    initialiseFixedAddress(): NonPayableTransactionObject<string>;

    lastMintRequestTs(): NonPayableTransactionObject<string>;

    lastUpdateMaxMintRequestTs(): NonPayableTransactionObject<string>;

    maxMintingRequestWei(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    registerToDaemonize(
      _registrations: [string, number | string | BN][]
    ): NonPayableTransactionObject<void>;

    requestMinting(
      _amountWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    setAddressUpdater(
      _addressUpdater: string
    ): NonPayableTransactionObject<void>;

    setBlockHoldoff(
      _blockHoldoff: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxMintingRequest(
      _maxMintingRequestWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    showDaemonizedErrors(
      startIndex: number | string | BN,
      numErrorTypesToShow: number | string | BN
    ): NonPayableTransactionObject<{
      _lastErrorBlock: string[];
      _numErrors: string[];
      _errorString: string[];
      _erroringContract: string[];
      _totalDaemonizedErrors: string;
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string;
    }>;

    showLastDaemonizedError(): NonPayableTransactionObject<{
      _lastErrorBlock: string[];
      _numErrors: string[];
      _errorString: string[];
      _erroringContract: string[];
      _totalDaemonizedErrors: string;
      0: string[];
      1: string[];
      2: string[];
      3: string[];
      4: string;
    }>;

    systemLastTriggeredAt(): NonPayableTransactionObject<string>;

    totalMintingReceivedWei(): NonPayableTransactionObject<string>;

    totalMintingRequestedWei(): NonPayableTransactionObject<string>;

    totalMintingWithdrawnWei(): NonPayableTransactionObject<string>;

    totalSelfDestructReceivedWei(): NonPayableTransactionObject<string>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    trigger(): NonPayableTransactionObject<string>;

    unregisterAll(): NonPayableTransactionObject<void>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    ContractDaemonizeErrored(
      cb?: Callback<ContractDaemonizeErrored>
    ): EventEmitter;
    ContractDaemonizeErrored(
      options?: EventOptions,
      cb?: Callback<ContractDaemonizeErrored>
    ): EventEmitter;

    ContractDaemonized(cb?: Callback<ContractDaemonized>): EventEmitter;
    ContractDaemonized(
      options?: EventOptions,
      cb?: Callback<ContractDaemonized>
    ): EventEmitter;

    ContractHeldOff(cb?: Callback<ContractHeldOff>): EventEmitter;
    ContractHeldOff(
      options?: EventOptions,
      cb?: Callback<ContractHeldOff>
    ): EventEmitter;

    ContractsSkippedOutOfGas(
      cb?: Callback<ContractsSkippedOutOfGas>
    ): EventEmitter;
    ContractsSkippedOutOfGas(
      options?: EventOptions,
      cb?: Callback<ContractsSkippedOutOfGas>
    ): EventEmitter;

    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    InflationSet(cb?: Callback<InflationSet>): EventEmitter;
    InflationSet(
      options?: EventOptions,
      cb?: Callback<InflationSet>
    ): EventEmitter;

    MintingReceived(cb?: Callback<MintingReceived>): EventEmitter;
    MintingReceived(
      options?: EventOptions,
      cb?: Callback<MintingReceived>
    ): EventEmitter;

    MintingRequestReceived(cb?: Callback<MintingRequestReceived>): EventEmitter;
    MintingRequestReceived(
      options?: EventOptions,
      cb?: Callback<MintingRequestReceived>
    ): EventEmitter;

    MintingRequestTriggered(
      cb?: Callback<MintingRequestTriggered>
    ): EventEmitter;
    MintingRequestTriggered(
      options?: EventOptions,
      cb?: Callback<MintingRequestTriggered>
    ): EventEmitter;

    MintingWithdrawn(cb?: Callback<MintingWithdrawn>): EventEmitter;
    MintingWithdrawn(
      options?: EventOptions,
      cb?: Callback<MintingWithdrawn>
    ): EventEmitter;

    RegistrationUpdated(cb?: Callback<RegistrationUpdated>): EventEmitter;
    RegistrationUpdated(
      options?: EventOptions,
      cb?: Callback<RegistrationUpdated>
    ): EventEmitter;

    SelfDestructReceived(cb?: Callback<SelfDestructReceived>): EventEmitter;
    SelfDestructReceived(
      options?: EventOptions,
      cb?: Callback<SelfDestructReceived>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ContractDaemonizeErrored",
    cb: Callback<ContractDaemonizeErrored>
  ): void;
  once(
    event: "ContractDaemonizeErrored",
    options: EventOptions,
    cb: Callback<ContractDaemonizeErrored>
  ): void;

  once(event: "ContractDaemonized", cb: Callback<ContractDaemonized>): void;
  once(
    event: "ContractDaemonized",
    options: EventOptions,
    cb: Callback<ContractDaemonized>
  ): void;

  once(event: "ContractHeldOff", cb: Callback<ContractHeldOff>): void;
  once(
    event: "ContractHeldOff",
    options: EventOptions,
    cb: Callback<ContractHeldOff>
  ): void;

  once(
    event: "ContractsSkippedOutOfGas",
    cb: Callback<ContractsSkippedOutOfGas>
  ): void;
  once(
    event: "ContractsSkippedOutOfGas",
    options: EventOptions,
    cb: Callback<ContractsSkippedOutOfGas>
  ): void;

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(event: "InflationSet", cb: Callback<InflationSet>): void;
  once(
    event: "InflationSet",
    options: EventOptions,
    cb: Callback<InflationSet>
  ): void;

  once(event: "MintingReceived", cb: Callback<MintingReceived>): void;
  once(
    event: "MintingReceived",
    options: EventOptions,
    cb: Callback<MintingReceived>
  ): void;

  once(
    event: "MintingRequestReceived",
    cb: Callback<MintingRequestReceived>
  ): void;
  once(
    event: "MintingRequestReceived",
    options: EventOptions,
    cb: Callback<MintingRequestReceived>
  ): void;

  once(
    event: "MintingRequestTriggered",
    cb: Callback<MintingRequestTriggered>
  ): void;
  once(
    event: "MintingRequestTriggered",
    options: EventOptions,
    cb: Callback<MintingRequestTriggered>
  ): void;

  once(event: "MintingWithdrawn", cb: Callback<MintingWithdrawn>): void;
  once(
    event: "MintingWithdrawn",
    options: EventOptions,
    cb: Callback<MintingWithdrawn>
  ): void;

  once(event: "RegistrationUpdated", cb: Callback<RegistrationUpdated>): void;
  once(
    event: "RegistrationUpdated",
    options: EventOptions,
    cb: Callback<RegistrationUpdated>
  ): void;

  once(event: "SelfDestructReceived", cb: Callback<SelfDestructReceived>): void;
  once(
    event: "SelfDestructReceived",
    options: EventOptions,
    cb: Callback<SelfDestructReceived>
  ): void;
}
