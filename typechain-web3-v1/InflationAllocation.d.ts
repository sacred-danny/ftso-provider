/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AnnualInflationPercentageScheduleSet = ContractEventLog<{
  annualInflationPercentagesBips: string[];
  0: string[];
}>;
export type AnnualInflationPercentageYielded = ContractEventLog<{
  percentageBips: string;
  0: string;
}>;
export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type InflationSet = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type InflationSharingPercentagesSet = ContractEventLog<{
  inflationRecievers: string[];
  percentagePerReceiverBips: string[];
  0: string[];
  1: string[];
}>;

export interface InflationAllocation extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): InflationAllocation;
  clone(): InflationAllocation;
  methods: {
    annualInflationPercentagesBips(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    claimGovernance(): NonPayableTransactionObject<void>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getAnnualPercentageBips(): NonPayableTransactionObject<string>;

    getSharingPercentages(): NonPayableTransactionObject<[string, string][]>;

    governance(): NonPayableTransactionObject<string>;

    inflation(): NonPayableTransactionObject<string>;

    inflationReceivers(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      receiverContract: string;
      percentageBips: string;
      0: string;
      1: string;
    }>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    lastAnnualInflationPercentageBips(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    setAnnualInflation(
      _annualInflationScheduleBips: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setSharingPercentages(
      _inflationRecievers: string[],
      _percentagePerReceiverBips: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AnnualInflationPercentageScheduleSet(
      cb?: Callback<AnnualInflationPercentageScheduleSet>
    ): EventEmitter;
    AnnualInflationPercentageScheduleSet(
      options?: EventOptions,
      cb?: Callback<AnnualInflationPercentageScheduleSet>
    ): EventEmitter;

    AnnualInflationPercentageYielded(
      cb?: Callback<AnnualInflationPercentageYielded>
    ): EventEmitter;
    AnnualInflationPercentageYielded(
      options?: EventOptions,
      cb?: Callback<AnnualInflationPercentageYielded>
    ): EventEmitter;

    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    InflationSet(cb?: Callback<InflationSet>): EventEmitter;
    InflationSet(
      options?: EventOptions,
      cb?: Callback<InflationSet>
    ): EventEmitter;

    InflationSharingPercentagesSet(
      cb?: Callback<InflationSharingPercentagesSet>
    ): EventEmitter;
    InflationSharingPercentagesSet(
      options?: EventOptions,
      cb?: Callback<InflationSharingPercentagesSet>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "AnnualInflationPercentageScheduleSet",
    cb: Callback<AnnualInflationPercentageScheduleSet>
  ): void;
  once(
    event: "AnnualInflationPercentageScheduleSet",
    options: EventOptions,
    cb: Callback<AnnualInflationPercentageScheduleSet>
  ): void;

  once(
    event: "AnnualInflationPercentageYielded",
    cb: Callback<AnnualInflationPercentageYielded>
  ): void;
  once(
    event: "AnnualInflationPercentageYielded",
    options: EventOptions,
    cb: Callback<AnnualInflationPercentageYielded>
  ): void;

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(event: "InflationSet", cb: Callback<InflationSet>): void;
  once(
    event: "InflationSet",
    options: EventOptions,
    cb: Callback<InflationSet>
  ): void;

  once(
    event: "InflationSharingPercentagesSet",
    cb: Callback<InflationSharingPercentagesSet>
  ): void;
  once(
    event: "InflationSharingPercentagesSet",
    options: EventOptions,
    cb: Callback<InflationSharingPercentagesSet>
  ): void;
}
