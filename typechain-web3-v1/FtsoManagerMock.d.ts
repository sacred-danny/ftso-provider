/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface FtsoManagerMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FtsoManagerMock;
  clone(): FtsoManagerMock;
  methods: {
    DEFAULT_FALLBACK_VALUE(): NonPayableTransactionObject<string>;

    MOCKS_LIST_END(): NonPayableTransactionObject<string>;

    MOCKS_LIST_END_HASH(): NonPayableTransactionObject<string>;

    MOCKS_LIST_START(): NonPayableTransactionObject<string>;

    SENTINEL_ANY_MOCKS(): NonPayableTransactionObject<string>;

    accrueUnearnedRewardsCall(
      epochId: number | string | BN,
      priceEpochDurationSeconds: number | string | BN,
      priceEpochEndTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    closeExpiredRewardEpochCall(
      rewardEpoch: number | string | BN,
      currentRewardEpoch: number | string | BN
    ): NonPayableTransactionObject<void>;

    distributeRewardsCall(
      addresses: string[],
      weights: (number | string | BN)[],
      totalWeight: number | string | BN,
      epochId: number | string | BN,
      ftso: string,
      priceEpochDurationSeconds: number | string | BN,
      currentRewardEpoch: number | string | BN,
      priceEpochEndTime: number | string | BN,
      votePowerBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    givenAnyReturn(
      response: string | number[]
    ): NonPayableTransactionObject<void>;

    givenAnyReturnAddress(response: string): NonPayableTransactionObject<void>;

    givenAnyReturnBool(response: boolean): NonPayableTransactionObject<void>;

    givenAnyReturnUint(
      response: number | string | BN
    ): NonPayableTransactionObject<void>;

    givenAnyRevert(): NonPayableTransactionObject<void>;

    givenAnyRevertWithMessage(
      message: string
    ): NonPayableTransactionObject<void>;

    givenAnyRunOutOfGas(): NonPayableTransactionObject<void>;

    givenCalldataReturn(
      call: string | number[],
      response: string | number[]
    ): NonPayableTransactionObject<void>;

    givenCalldataReturnAddress(
      call: string | number[],
      response: string
    ): NonPayableTransactionObject<void>;

    givenCalldataReturnBool(
      call: string | number[],
      response: boolean
    ): NonPayableTransactionObject<void>;

    givenCalldataReturnUint(
      call: string | number[],
      response: number | string | BN
    ): NonPayableTransactionObject<void>;

    givenCalldataRevert(
      call: string | number[]
    ): NonPayableTransactionObject<void>;

    givenCalldataRevertWithMessage(
      call: string | number[],
      message: string
    ): NonPayableTransactionObject<void>;

    givenCalldataRunOutOfGas(
      call: string | number[]
    ): NonPayableTransactionObject<void>;

    givenMethodReturn(
      call: string | number[],
      response: string | number[]
    ): NonPayableTransactionObject<void>;

    givenMethodReturnAddress(
      call: string | number[],
      response: string
    ): NonPayableTransactionObject<void>;

    givenMethodReturnBool(
      call: string | number[],
      response: boolean
    ): NonPayableTransactionObject<void>;

    givenMethodReturnUint(
      call: string | number[],
      response: number | string | BN
    ): NonPayableTransactionObject<void>;

    givenMethodRevert(
      call: string | number[]
    ): NonPayableTransactionObject<void>;

    givenMethodRevertWithMessage(
      call: string | number[],
      message: string
    ): NonPayableTransactionObject<void>;

    givenMethodRunOutOfGas(
      call: string | number[]
    ): NonPayableTransactionObject<void>;

    invocationCount(): NonPayableTransactionObject<string>;

    invocationCountForCalldata(
      call: string | number[]
    ): NonPayableTransactionObject<string>;

    invocationCountForMethod(
      call: string | number[]
    ): NonPayableTransactionObject<string>;

    reset(): NonPayableTransactionObject<void>;

    setRewardManager(rewardManager: string): NonPayableTransactionObject<void>;

    updateInvocationCount(
      methodId: string | number[],
      originalMsgData: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
