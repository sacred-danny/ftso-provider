/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface PriceReader extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PriceReader;
  clone(): PriceReader;
  methods: {
    ftsoRegistry(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getAllCurrentPrices(): NonPayableTransactionObject<
      [string, string, string, string][]
    >;

    getAllPrices(
      _epochId: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string][]>;

    getCurrentPricesByIndices(
      _indices: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    getCurrentPricesBySymbols(
      _symbols: string[]
    ): NonPayableTransactionObject<string[]>;

    getPricesByIndices(
      _epochId: number | string | BN,
      _indices: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    getPricesBySymbols(
      _epochId: number | string | BN,
      _symbols: string[]
    ): NonPayableTransactionObject<string[]>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
