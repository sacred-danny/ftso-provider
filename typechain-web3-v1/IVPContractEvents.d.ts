/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Delegate = ContractEventLog<{
  from: string;
  to: string;
  priorVotePower: string;
  newVotePower: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Revoke = ContractEventLog<{
  delegator: string;
  delegatee: string;
  votePower: string;
  blockNumber: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IVPContractEvents extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IVPContractEvents;
  clone(): IVPContractEvents;
  methods: {};
  events: {
    Delegate(cb?: Callback<Delegate>): EventEmitter;
    Delegate(options?: EventOptions, cb?: Callback<Delegate>): EventEmitter;

    Revoke(cb?: Callback<Revoke>): EventEmitter;
    Revoke(options?: EventOptions, cb?: Callback<Revoke>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Delegate", cb: Callback<Delegate>): void;
  once(event: "Delegate", options: EventOptions, cb: Callback<Delegate>): void;

  once(event: "Revoke", cb: Callback<Revoke>): void;
  once(event: "Revoke", options: EventOptions, cb: Callback<Revoke>): void;
}
