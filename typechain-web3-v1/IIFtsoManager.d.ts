/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AccruingUnearnedRewardsFailed = ContractEventLog<{
  epochId: string;
  0: string;
}>;
export type CleanupBlockNumberManagerFailedForBlock = ContractEventLog<{
  blockNumber: string;
  0: string;
}>;
export type ClosingExpiredRewardEpochFailed = ContractEventLog<{
  rewardEpoch: string;
  0: string;
}>;
export type DistributingRewardsFailed = ContractEventLog<{
  ftso: string;
  epochId: string;
  0: string;
  1: string;
}>;
export type FallbackMode = ContractEventLog<{
  fallbackMode: boolean;
  0: boolean;
}>;
export type FinalizingPriceEpochFailed = ContractEventLog<{
  ftso: string;
  epochId: string;
  failingType: string;
  0: string;
  1: string;
  2: string;
}>;
export type FtsoAdded = ContractEventLog<{
  ftso: string;
  add: boolean;
  0: string;
  1: boolean;
}>;
export type FtsoDeactivationFailed = ContractEventLog<{
  ftso: string;
  0: string;
}>;
export type FtsoFallbackMode = ContractEventLog<{
  ftso: string;
  fallbackMode: boolean;
  0: string;
  1: boolean;
}>;
export type InitializingCurrentEpochStateForRevealFailed = ContractEventLog<{
  ftso: string;
  epochId: string;
  0: string;
  1: string;
}>;
export type PriceEpochFinalized = ContractEventLog<{
  chosenFtso: string;
  rewardEpochId: string;
  0: string;
  1: string;
}>;
export type RewardEpochFinalized = ContractEventLog<{
  votepowerBlock: string;
  startBlock: string;
  0: string;
  1: string;
}>;
export type UpdatingActiveValidatorsTriggerFailed = ContractEventLog<{
  rewardEpoch: string;
  0: string;
}>;

export interface IIFtsoManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IIFtsoManager;
  clone(): IIFtsoManager;
  methods: {
    activate(): NonPayableTransactionObject<void>;

    active(): NonPayableTransactionObject<boolean>;

    addFtso(_ftso: string): NonPayableTransactionObject<void>;

    addFtsosBulk(_ftsos: string[]): NonPayableTransactionObject<void>;

    currentRewardEpochEnds(): NonPayableTransactionObject<string>;

    daemonize(): NonPayableTransactionObject<boolean>;

    getContractName(): NonPayableTransactionObject<string>;

    getCurrentPriceEpochData(): NonPayableTransactionObject<{
      _priceEpochId: string;
      _priceEpochStartTimestamp: string;
      _priceEpochEndTimestamp: string;
      _priceEpochRevealEndTimestamp: string;
      _currentTimestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getCurrentPriceEpochId(): NonPayableTransactionObject<string>;

    getCurrentRewardEpoch(): NonPayableTransactionObject<string>;

    getFallbackMode(): NonPayableTransactionObject<{
      _fallbackMode: boolean;
      _ftsos: string[];
      _ftsoInFallbackMode: boolean[];
      0: boolean;
      1: string[];
      2: boolean[];
    }>;

    getFtsos(): NonPayableTransactionObject<string[]>;

    getLastUnprocessedPriceEpochData(): NonPayableTransactionObject<{
      _lastUnprocessedPriceEpoch: string;
      _lastUnprocessedPriceEpochRevealEnds: string;
      _lastUnprocessedPriceEpochInitialized: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    getPriceEpochConfiguration(): NonPayableTransactionObject<{
      _firstPriceEpochStartTs: string;
      _priceEpochDurationSeconds: string;
      _revealEpochDurationSeconds: string;
      0: string;
      1: string;
      2: string;
    }>;

    getRewardEpochConfiguration(): NonPayableTransactionObject<{
      _firstRewardEpochStartTs: string;
      _rewardEpochDurationSeconds: string;
      0: string;
      1: string;
    }>;

    getRewardEpochData(
      _rewardEpochId: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getRewardEpochToExpireNext(): NonPayableTransactionObject<string>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<string>;

    notInitializedFtsos(arg0: string): NonPayableTransactionObject<boolean>;

    removeFtso(_ftso: string): NonPayableTransactionObject<void>;

    replaceFtso(
      _ftsoToAdd: string,
      copyCurrentPrice: boolean,
      copyAssetOrAssetFtsos: boolean
    ): NonPayableTransactionObject<void>;

    replaceFtsosBulk(
      _ftsosToAdd: string[],
      copyCurrentPrice: boolean,
      copyAssetOrAssetFtsos: boolean
    ): NonPayableTransactionObject<void>;

    rewardEpochDurationSeconds(): NonPayableTransactionObject<string>;

    rewardEpochs(
      _rewardEpochId: number | string | BN
    ): NonPayableTransactionObject<{
      _votepowerBlock: string;
      _startBlock: string;
      _startTimestamp: string;
      0: string;
      1: string;
      2: string;
    }>;

    rewardEpochsStartTs(): NonPayableTransactionObject<string>;

    setFallbackMode(_fallbackMode: boolean): NonPayableTransactionObject<void>;

    setFtsoAsset(
      _ftso: string,
      _asset: string
    ): NonPayableTransactionObject<void>;

    setFtsoAssetFtsos(
      _ftso: string,
      _assetFtsos: string[]
    ): NonPayableTransactionObject<void>;

    setFtsoFallbackMode(
      _ftso: string,
      _fallbackMode: boolean
    ): NonPayableTransactionObject<void>;

    setGovernanceParameters(
      _maxVotePowerNatThresholdFraction: number | string | BN,
      _maxVotePowerAssetThresholdFraction: number | string | BN,
      _lowAssetUSDThreshold: number | string | BN,
      _highAssetUSDThreshold: number | string | BN,
      _highAssetTurnoutThresholdBIPS: number | string | BN,
      _lowNatTurnoutThresholdBIPS: number | string | BN,
      _rewardExpiryOffsetSeconds: number | string | BN,
      _trustedAddresses: string[]
    ): NonPayableTransactionObject<void>;

    setInitialRewardData(
      _nextRewardEpochToExpire: number | string | BN,
      _rewardEpochsLength: number | string | BN,
      _currentRewardEpochEnds: number | string | BN
    ): NonPayableTransactionObject<void>;

    switchToFallbackMode(): NonPayableTransactionObject<boolean>;
  };
  events: {
    AccruingUnearnedRewardsFailed(
      cb?: Callback<AccruingUnearnedRewardsFailed>
    ): EventEmitter;
    AccruingUnearnedRewardsFailed(
      options?: EventOptions,
      cb?: Callback<AccruingUnearnedRewardsFailed>
    ): EventEmitter;

    CleanupBlockNumberManagerFailedForBlock(
      cb?: Callback<CleanupBlockNumberManagerFailedForBlock>
    ): EventEmitter;
    CleanupBlockNumberManagerFailedForBlock(
      options?: EventOptions,
      cb?: Callback<CleanupBlockNumberManagerFailedForBlock>
    ): EventEmitter;

    ClosingExpiredRewardEpochFailed(
      cb?: Callback<ClosingExpiredRewardEpochFailed>
    ): EventEmitter;
    ClosingExpiredRewardEpochFailed(
      options?: EventOptions,
      cb?: Callback<ClosingExpiredRewardEpochFailed>
    ): EventEmitter;

    DistributingRewardsFailed(
      cb?: Callback<DistributingRewardsFailed>
    ): EventEmitter;
    DistributingRewardsFailed(
      options?: EventOptions,
      cb?: Callback<DistributingRewardsFailed>
    ): EventEmitter;

    FallbackMode(cb?: Callback<FallbackMode>): EventEmitter;
    FallbackMode(
      options?: EventOptions,
      cb?: Callback<FallbackMode>
    ): EventEmitter;

    FinalizingPriceEpochFailed(
      cb?: Callback<FinalizingPriceEpochFailed>
    ): EventEmitter;
    FinalizingPriceEpochFailed(
      options?: EventOptions,
      cb?: Callback<FinalizingPriceEpochFailed>
    ): EventEmitter;

    FtsoAdded(cb?: Callback<FtsoAdded>): EventEmitter;
    FtsoAdded(options?: EventOptions, cb?: Callback<FtsoAdded>): EventEmitter;

    FtsoDeactivationFailed(cb?: Callback<FtsoDeactivationFailed>): EventEmitter;
    FtsoDeactivationFailed(
      options?: EventOptions,
      cb?: Callback<FtsoDeactivationFailed>
    ): EventEmitter;

    FtsoFallbackMode(cb?: Callback<FtsoFallbackMode>): EventEmitter;
    FtsoFallbackMode(
      options?: EventOptions,
      cb?: Callback<FtsoFallbackMode>
    ): EventEmitter;

    InitializingCurrentEpochStateForRevealFailed(
      cb?: Callback<InitializingCurrentEpochStateForRevealFailed>
    ): EventEmitter;
    InitializingCurrentEpochStateForRevealFailed(
      options?: EventOptions,
      cb?: Callback<InitializingCurrentEpochStateForRevealFailed>
    ): EventEmitter;

    PriceEpochFinalized(cb?: Callback<PriceEpochFinalized>): EventEmitter;
    PriceEpochFinalized(
      options?: EventOptions,
      cb?: Callback<PriceEpochFinalized>
    ): EventEmitter;

    RewardEpochFinalized(cb?: Callback<RewardEpochFinalized>): EventEmitter;
    RewardEpochFinalized(
      options?: EventOptions,
      cb?: Callback<RewardEpochFinalized>
    ): EventEmitter;

    UpdatingActiveValidatorsTriggerFailed(
      cb?: Callback<UpdatingActiveValidatorsTriggerFailed>
    ): EventEmitter;
    UpdatingActiveValidatorsTriggerFailed(
      options?: EventOptions,
      cb?: Callback<UpdatingActiveValidatorsTriggerFailed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "AccruingUnearnedRewardsFailed",
    cb: Callback<AccruingUnearnedRewardsFailed>
  ): void;
  once(
    event: "AccruingUnearnedRewardsFailed",
    options: EventOptions,
    cb: Callback<AccruingUnearnedRewardsFailed>
  ): void;

  once(
    event: "CleanupBlockNumberManagerFailedForBlock",
    cb: Callback<CleanupBlockNumberManagerFailedForBlock>
  ): void;
  once(
    event: "CleanupBlockNumberManagerFailedForBlock",
    options: EventOptions,
    cb: Callback<CleanupBlockNumberManagerFailedForBlock>
  ): void;

  once(
    event: "ClosingExpiredRewardEpochFailed",
    cb: Callback<ClosingExpiredRewardEpochFailed>
  ): void;
  once(
    event: "ClosingExpiredRewardEpochFailed",
    options: EventOptions,
    cb: Callback<ClosingExpiredRewardEpochFailed>
  ): void;

  once(
    event: "DistributingRewardsFailed",
    cb: Callback<DistributingRewardsFailed>
  ): void;
  once(
    event: "DistributingRewardsFailed",
    options: EventOptions,
    cb: Callback<DistributingRewardsFailed>
  ): void;

  once(event: "FallbackMode", cb: Callback<FallbackMode>): void;
  once(
    event: "FallbackMode",
    options: EventOptions,
    cb: Callback<FallbackMode>
  ): void;

  once(
    event: "FinalizingPriceEpochFailed",
    cb: Callback<FinalizingPriceEpochFailed>
  ): void;
  once(
    event: "FinalizingPriceEpochFailed",
    options: EventOptions,
    cb: Callback<FinalizingPriceEpochFailed>
  ): void;

  once(event: "FtsoAdded", cb: Callback<FtsoAdded>): void;
  once(
    event: "FtsoAdded",
    options: EventOptions,
    cb: Callback<FtsoAdded>
  ): void;

  once(
    event: "FtsoDeactivationFailed",
    cb: Callback<FtsoDeactivationFailed>
  ): void;
  once(
    event: "FtsoDeactivationFailed",
    options: EventOptions,
    cb: Callback<FtsoDeactivationFailed>
  ): void;

  once(event: "FtsoFallbackMode", cb: Callback<FtsoFallbackMode>): void;
  once(
    event: "FtsoFallbackMode",
    options: EventOptions,
    cb: Callback<FtsoFallbackMode>
  ): void;

  once(
    event: "InitializingCurrentEpochStateForRevealFailed",
    cb: Callback<InitializingCurrentEpochStateForRevealFailed>
  ): void;
  once(
    event: "InitializingCurrentEpochStateForRevealFailed",
    options: EventOptions,
    cb: Callback<InitializingCurrentEpochStateForRevealFailed>
  ): void;

  once(event: "PriceEpochFinalized", cb: Callback<PriceEpochFinalized>): void;
  once(
    event: "PriceEpochFinalized",
    options: EventOptions,
    cb: Callback<PriceEpochFinalized>
  ): void;

  once(event: "RewardEpochFinalized", cb: Callback<RewardEpochFinalized>): void;
  once(
    event: "RewardEpochFinalized",
    options: EventOptions,
    cb: Callback<RewardEpochFinalized>
  ): void;

  once(
    event: "UpdatingActiveValidatorsTriggerFailed",
    cb: Callback<UpdatingActiveValidatorsTriggerFailed>
  ): void;
  once(
    event: "UpdatingActiveValidatorsTriggerFailed",
    options: EventOptions,
    cb: Callback<UpdatingActiveValidatorsTriggerFailed>
  ): void;
}
