/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FallbackMode = ContractEventLog<{}>;

export interface EndlessLoopMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): EndlessLoopMock;
  clone(): EndlessLoopMock;
  methods: {
    aNumber(): NonPayableTransactionObject<string>;

    allowFallbackMode(): NonPayableTransactionObject<boolean>;

    daemonize(): NonPayableTransactionObject<boolean>;

    fallbackMode(): NonPayableTransactionObject<boolean>;

    getContractName(): NonPayableTransactionObject<string>;

    loopInFallbackMode(): NonPayableTransactionObject<boolean>;

    switchToFallbackMode(): NonPayableTransactionObject<boolean>;
  };
  events: {
    FallbackMode(cb?: Callback<FallbackMode>): EventEmitter;
    FallbackMode(
      options?: EventOptions,
      cb?: Callback<FallbackMode>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FallbackMode", cb: Callback<FallbackMode>): void;
  once(
    event: "FallbackMode",
    options: EventOptions,
    cb: Callback<FallbackMode>
  ): void;
}
