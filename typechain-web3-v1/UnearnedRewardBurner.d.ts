/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Burned = ContractEventLog<{
  burnAddress: string;
  burnedWei: string;
  0: string;
  1: string;
}>;
export type Received = ContractEventLog<{
  amountWei: string;
  0: string;
}>;

export interface UnearnedRewardBurner extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): UnearnedRewardBurner;
  clone(): UnearnedRewardBurner;
  methods: {
    burnAddress(): NonPayableTransactionObject<string>;

    die(): NonPayableTransactionObject<void>;
  };
  events: {
    Burned(cb?: Callback<Burned>): EventEmitter;
    Burned(options?: EventOptions, cb?: Callback<Burned>): EventEmitter;

    Received(cb?: Callback<Received>): EventEmitter;
    Received(options?: EventOptions, cb?: Callback<Received>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Burned", cb: Callback<Burned>): void;
  once(event: "Burned", options: EventOptions, cb: Callback<Burned>): void;

  once(event: "Received", cb: Callback<Received>): void;
  once(event: "Received", options: EventOptions, cb: Callback<Received>): void;
}
