/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AccountClaimed = ContractEventLog<{
  whoClaimed: string;
  sentTo: string;
  month: string;
  amountWei: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type AccountOptOut = ContractEventLog<{
  theAccount: string;
  confirmed: boolean;
  0: string;
  1: boolean;
}>;
export type EntitlementStarted = ContractEventLog<{}>;
export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;

export interface DistributionToDelegators extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DistributionToDelegators;
  clone(): DistributionToDelegators;
  methods: {
    claim(
      _recipient: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    claimGovernance(): NonPayableTransactionObject<void>;

    claimToPersonalDelegationAccount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    confirmOptOutOfAirdrop(
      _optOutAddresses: string[]
    ): NonPayableTransactionObject<void>;

    delegationAccountManager(): NonPayableTransactionObject<string>;

    endBlockNumber(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    entitlementStartTs(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getClaimableAmount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimableAmountOf(
      _account: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimedAmount(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getClaimedAmountOf(
      _account: string,
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    getCurrentMonth(): NonPayableTransactionObject<string>;

    getMonthToExpireNext(): NonPayableTransactionObject<string>;

    getTokenPoolSupplyData(): NonPayableTransactionObject<{
      _lockedFundsWei: string;
      _totalInflationAuthorizedWei: string;
      _totalClaimedWei: string;
      0: string;
      1: string;
      2: string;
    }>;

    governance(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    optOut(arg0: string): NonPayableTransactionObject<boolean>;

    optOutAddresses(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    optOutCandidate(arg0: string): NonPayableTransactionObject<boolean>;

    optOutOfAirdrop(): NonPayableTransactionObject<void>;

    priceSubmitter(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    secondsTillNextClaim(): NonPayableTransactionObject<string>;

    setEntitlementStart(
      _entitlementStartTs: number | string | BN
    ): NonPayableTransactionObject<void>;

    startBlockNumber(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    stop(): NonPayableTransactionObject<void>;

    stopped(): NonPayableTransactionObject<boolean>;

    supply(): NonPayableTransactionObject<string>;

    totalAvailableAmount(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalBurnedWei(): NonPayableTransactionObject<string>;

    totalClaimedWei(): NonPayableTransactionObject<string>;

    totalDistributableAmount(): NonPayableTransactionObject<string>;

    totalEntitlementWei(): NonPayableTransactionObject<string>;

    totalUnclaimedAmount(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalUnclaimedWeight(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    treasury(): NonPayableTransactionObject<string>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    votePowerBlockNumbers(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    wNat(): NonPayableTransactionObject<string>;
  };
  events: {
    AccountClaimed(cb?: Callback<AccountClaimed>): EventEmitter;
    AccountClaimed(
      options?: EventOptions,
      cb?: Callback<AccountClaimed>
    ): EventEmitter;

    AccountOptOut(cb?: Callback<AccountOptOut>): EventEmitter;
    AccountOptOut(
      options?: EventOptions,
      cb?: Callback<AccountOptOut>
    ): EventEmitter;

    EntitlementStarted(cb?: Callback<EntitlementStarted>): EventEmitter;
    EntitlementStarted(
      options?: EventOptions,
      cb?: Callback<EntitlementStarted>
    ): EventEmitter;

    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AccountClaimed", cb: Callback<AccountClaimed>): void;
  once(
    event: "AccountClaimed",
    options: EventOptions,
    cb: Callback<AccountClaimed>
  ): void;

  once(event: "AccountOptOut", cb: Callback<AccountOptOut>): void;
  once(
    event: "AccountOptOut",
    options: EventOptions,
    cb: Callback<AccountOptOut>
  ): void;

  once(event: "EntitlementStarted", cb: Callback<EntitlementStarted>): void;
  once(
    event: "EntitlementStarted",
    options: EventOptions,
    cb: Callback<EntitlementStarted>
  ): void;

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;
}
