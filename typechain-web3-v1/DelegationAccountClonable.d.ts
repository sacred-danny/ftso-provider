/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ClaimAirdrop = ContractEventLog<{
  delegationAccount: string;
  amount: string;
  month: string;
  distribution: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ClaimDistributionFailure = ContractEventLog<{
  err: string;
  distribution: string;
  0: string;
  1: string;
}>;
export type ClaimFtsoFailure = ContractEventLog<{
  err: string;
  ftsoRewardManager: string;
  0: string;
  1: string;
}>;
export type ClaimFtsoRewards = ContractEventLog<{
  delegationAccount: string;
  rewardEpochs: string[];
  amount: string;
  ftsoRewardManager: string;
  0: string;
  1: string[];
  2: string;
  3: string;
}>;
export type DelegateFtso = ContractEventLog<{
  delegationAccount: string;
  to: string;
  bips: string;
  0: string;
  1: string;
  2: string;
}>;
export type DelegateGovernance = ContractEventLog<{
  delegationAccount: string;
  to: string;
  balance: string;
  0: string;
  1: string;
  2: string;
}>;
export type EpochsWithUnclaimedRewardsFailure = ContractEventLog<{
  err: string;
  ftsoRewardManager: string;
  0: string;
  1: string;
}>;
export type Initialize = ContractEventLog<{
  owner: string;
  manager: string;
  0: string;
  1: string;
}>;
export type RemoveExecutor = ContractEventLog<{
  delegationAccount: string;
  executor: string;
  0: string;
  1: string;
}>;
export type SetExecutor = ContractEventLog<{
  delegationAccount: string;
  executor: string;
  0: string;
  1: string;
}>;
export type UndelegateAllFtso = ContractEventLog<{
  delegationAccount: string;
  0: string;
}>;
export type UndelegateGovernance = ContractEventLog<{
  delegationAccount: string;
  0: string;
}>;
export type WidthrawToOwner = ContractEventLog<{
  delegationAccount: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface DelegationAccountClonable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DelegationAccountClonable;
  clone(): DelegationAccountClonable;
  methods: {
    claimAirdropDistribution(
      _month: number | string | BN
    ): NonPayableTransactionObject<string>;

    claimAllFtsoRewards(): NonPayableTransactionObject<string>;

    claimAllUnclaimedAirdropDistribution(): NonPayableTransactionObject<string>;

    claimFtsoRewards(
      _epochs: (number | string | BN)[]
    ): NonPayableTransactionObject<string>;

    delegate(
      _to: string,
      _bips: number | string | BN
    ): NonPayableTransactionObject<void>;

    delegateGovernance(_to: string): NonPayableTransactionObject<void>;

    initialize(
      _owner: string,
      _manager: string
    ): NonPayableTransactionObject<void>;

    isExecutor(arg0: string): NonPayableTransactionObject<boolean>;

    manager(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    removeExecutor(_executor: string): NonPayableTransactionObject<void>;

    setExecutor(_executor: string): NonPayableTransactionObject<void>;

    undelegateAll(): NonPayableTransactionObject<void>;

    undelegateGovernance(): NonPayableTransactionObject<void>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    ClaimAirdrop(cb?: Callback<ClaimAirdrop>): EventEmitter;
    ClaimAirdrop(
      options?: EventOptions,
      cb?: Callback<ClaimAirdrop>
    ): EventEmitter;

    ClaimDistributionFailure(
      cb?: Callback<ClaimDistributionFailure>
    ): EventEmitter;
    ClaimDistributionFailure(
      options?: EventOptions,
      cb?: Callback<ClaimDistributionFailure>
    ): EventEmitter;

    ClaimFtsoFailure(cb?: Callback<ClaimFtsoFailure>): EventEmitter;
    ClaimFtsoFailure(
      options?: EventOptions,
      cb?: Callback<ClaimFtsoFailure>
    ): EventEmitter;

    ClaimFtsoRewards(cb?: Callback<ClaimFtsoRewards>): EventEmitter;
    ClaimFtsoRewards(
      options?: EventOptions,
      cb?: Callback<ClaimFtsoRewards>
    ): EventEmitter;

    DelegateFtso(cb?: Callback<DelegateFtso>): EventEmitter;
    DelegateFtso(
      options?: EventOptions,
      cb?: Callback<DelegateFtso>
    ): EventEmitter;

    DelegateGovernance(cb?: Callback<DelegateGovernance>): EventEmitter;
    DelegateGovernance(
      options?: EventOptions,
      cb?: Callback<DelegateGovernance>
    ): EventEmitter;

    EpochsWithUnclaimedRewardsFailure(
      cb?: Callback<EpochsWithUnclaimedRewardsFailure>
    ): EventEmitter;
    EpochsWithUnclaimedRewardsFailure(
      options?: EventOptions,
      cb?: Callback<EpochsWithUnclaimedRewardsFailure>
    ): EventEmitter;

    Initialize(cb?: Callback<Initialize>): EventEmitter;
    Initialize(options?: EventOptions, cb?: Callback<Initialize>): EventEmitter;

    RemoveExecutor(cb?: Callback<RemoveExecutor>): EventEmitter;
    RemoveExecutor(
      options?: EventOptions,
      cb?: Callback<RemoveExecutor>
    ): EventEmitter;

    SetExecutor(cb?: Callback<SetExecutor>): EventEmitter;
    SetExecutor(
      options?: EventOptions,
      cb?: Callback<SetExecutor>
    ): EventEmitter;

    UndelegateAllFtso(cb?: Callback<UndelegateAllFtso>): EventEmitter;
    UndelegateAllFtso(
      options?: EventOptions,
      cb?: Callback<UndelegateAllFtso>
    ): EventEmitter;

    UndelegateGovernance(cb?: Callback<UndelegateGovernance>): EventEmitter;
    UndelegateGovernance(
      options?: EventOptions,
      cb?: Callback<UndelegateGovernance>
    ): EventEmitter;

    WidthrawToOwner(cb?: Callback<WidthrawToOwner>): EventEmitter;
    WidthrawToOwner(
      options?: EventOptions,
      cb?: Callback<WidthrawToOwner>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ClaimAirdrop", cb: Callback<ClaimAirdrop>): void;
  once(
    event: "ClaimAirdrop",
    options: EventOptions,
    cb: Callback<ClaimAirdrop>
  ): void;

  once(
    event: "ClaimDistributionFailure",
    cb: Callback<ClaimDistributionFailure>
  ): void;
  once(
    event: "ClaimDistributionFailure",
    options: EventOptions,
    cb: Callback<ClaimDistributionFailure>
  ): void;

  once(event: "ClaimFtsoFailure", cb: Callback<ClaimFtsoFailure>): void;
  once(
    event: "ClaimFtsoFailure",
    options: EventOptions,
    cb: Callback<ClaimFtsoFailure>
  ): void;

  once(event: "ClaimFtsoRewards", cb: Callback<ClaimFtsoRewards>): void;
  once(
    event: "ClaimFtsoRewards",
    options: EventOptions,
    cb: Callback<ClaimFtsoRewards>
  ): void;

  once(event: "DelegateFtso", cb: Callback<DelegateFtso>): void;
  once(
    event: "DelegateFtso",
    options: EventOptions,
    cb: Callback<DelegateFtso>
  ): void;

  once(event: "DelegateGovernance", cb: Callback<DelegateGovernance>): void;
  once(
    event: "DelegateGovernance",
    options: EventOptions,
    cb: Callback<DelegateGovernance>
  ): void;

  once(
    event: "EpochsWithUnclaimedRewardsFailure",
    cb: Callback<EpochsWithUnclaimedRewardsFailure>
  ): void;
  once(
    event: "EpochsWithUnclaimedRewardsFailure",
    options: EventOptions,
    cb: Callback<EpochsWithUnclaimedRewardsFailure>
  ): void;

  once(event: "Initialize", cb: Callback<Initialize>): void;
  once(
    event: "Initialize",
    options: EventOptions,
    cb: Callback<Initialize>
  ): void;

  once(event: "RemoveExecutor", cb: Callback<RemoveExecutor>): void;
  once(
    event: "RemoveExecutor",
    options: EventOptions,
    cb: Callback<RemoveExecutor>
  ): void;

  once(event: "SetExecutor", cb: Callback<SetExecutor>): void;
  once(
    event: "SetExecutor",
    options: EventOptions,
    cb: Callback<SetExecutor>
  ): void;

  once(event: "UndelegateAllFtso", cb: Callback<UndelegateAllFtso>): void;
  once(
    event: "UndelegateAllFtso",
    options: EventOptions,
    cb: Callback<UndelegateAllFtso>
  ): void;

  once(event: "UndelegateGovernance", cb: Callback<UndelegateGovernance>): void;
  once(
    event: "UndelegateGovernance",
    options: EventOptions,
    cb: Callback<UndelegateGovernance>
  ): void;

  once(event: "WidthrawToOwner", cb: Callback<WidthrawToOwner>): void;
  once(
    event: "WidthrawToOwner",
    options: EventOptions,
    cb: Callback<WidthrawToOwner>
  ): void;
}
