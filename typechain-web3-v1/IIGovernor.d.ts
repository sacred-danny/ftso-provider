/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ProposalCreated = ContractEventLog<{
  proposalId: string;
  proposer: string;
  targets: string[];
  values: string[];
  signatures: string[];
  calldatas: string[];
  startTime: string;
  endTime: string;
  description: string;
  votePowerBlock: string;
  wrappingThreshold: string;
  absoluteThreshold: string;
  relativeThreshold: string;
  0: string;
  1: string;
  2: string[];
  3: string[];
  4: string[];
  5: string[];
  6: string;
  7: string;
  8: string;
  9: string;
  10: string;
  11: string;
  12: string;
}>;
export type ProposalExecuted = ContractEventLog<{
  proposalId: string;
  0: string;
}>;
export type VoteCast = ContractEventLog<{
  voter: string;
  proposalId: string;
  support: string;
  weight: string;
  reason: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface IIGovernor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IIGovernor;
  clone(): IIGovernor;
  methods: {
    absoluteThreshold(): NonPayableTransactionObject<string>;

    castVote(
      _proposalId: number | string | BN,
      _support: number | string | BN
    ): NonPayableTransactionObject<string>;

    castVoteBySig(
      _proposalId: number | string | BN,
      _support: number | string | BN,
      _v: number | string | BN,
      _r: string | number[],
      _s: string | number[]
    ): NonPayableTransactionObject<string>;

    castVoteWithReason(
      _proposalId: number | string | BN,
      _support: number | string | BN,
      _reason: string
    ): NonPayableTransactionObject<string>;

    "execute(address[],uint256[],bytes[],bytes32)"(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _descriptionHash: string | number[]
    ): PayableTransactionObject<string>;

    "execute(string)"(
      _description: string
    ): NonPayableTransactionObject<string>;

    executionDelay(): NonPayableTransactionObject<string>;

    executionPeriod(): NonPayableTransactionObject<string>;

    getProposalInfo(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<{
      _proposer: string;
      _votePowerBlock: string;
      _voteStartTime: string;
      _voteEndTime: string;
      _execStartTime: string;
      _execEndTime: string;
      _executed: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    getProposalVP(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<{
      _totalVP: string;
      _for: string;
      _against: string;
      _abstain: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    getVotePowerLifeTimeDays(): NonPayableTransactionObject<string>;

    getVotes(
      _voter: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getVpBlockPeriodSeconds(): NonPayableTransactionObject<string>;

    hasVoted(
      _proposalId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<boolean>;

    proposalThreshold(): NonPayableTransactionObject<string>;

    "propose(address[],uint256[],bytes[],string)"(
      _targets: string[],
      _values: (number | string | BN)[],
      _calldatas: (string | number[])[],
      _description: string
    ): NonPayableTransactionObject<string>;

    "propose(string)"(
      _description: string
    ): NonPayableTransactionObject<string>;

    quorum(
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    relativeThreshold(): NonPayableTransactionObject<string>;

    state(
      _proposalId: number | string | BN
    ): NonPayableTransactionObject<string>;

    votingDelay(): NonPayableTransactionObject<string>;

    votingPeriod(): NonPayableTransactionObject<string>;

    wrappingThreshold(): NonPayableTransactionObject<string>;
  };
  events: {
    ProposalCreated(cb?: Callback<ProposalCreated>): EventEmitter;
    ProposalCreated(
      options?: EventOptions,
      cb?: Callback<ProposalCreated>
    ): EventEmitter;

    ProposalExecuted(cb?: Callback<ProposalExecuted>): EventEmitter;
    ProposalExecuted(
      options?: EventOptions,
      cb?: Callback<ProposalExecuted>
    ): EventEmitter;

    VoteCast(cb?: Callback<VoteCast>): EventEmitter;
    VoteCast(options?: EventOptions, cb?: Callback<VoteCast>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ProposalCreated", cb: Callback<ProposalCreated>): void;
  once(
    event: "ProposalCreated",
    options: EventOptions,
    cb: Callback<ProposalCreated>
  ): void;

  once(event: "ProposalExecuted", cb: Callback<ProposalExecuted>): void;
  once(
    event: "ProposalExecuted",
    options: EventOptions,
    cb: Callback<ProposalExecuted>
  ): void;

  once(event: "VoteCast", cb: Callback<VoteCast>): void;
  once(event: "VoteCast", options: EventOptions, cb: Callback<VoteCast>): void;
}
