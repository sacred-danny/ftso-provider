/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IFtsoRegistry extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IFtsoRegistry;
  clone(): IFtsoRegistry;
  methods: {
    "getCurrentPrice(string)"(_symbol: string): NonPayableTransactionObject<{
      _price: string;
      _timestamp: string;
      0: string;
      1: string;
    }>;

    "getCurrentPrice(uint256)"(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<{
      _price: string;
      _timestamp: string;
      0: string;
      1: string;
    }>;

    getFtso(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getFtsoBySymbol(_symbol: string): NonPayableTransactionObject<string>;

    getFtsoIndex(_symbol: string): NonPayableTransactionObject<string>;

    getFtsoSymbol(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getFtsos(
      _indices: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    getSupportedFtsos(): NonPayableTransactionObject<string[]>;

    getSupportedIndices(): NonPayableTransactionObject<string[]>;

    getSupportedIndicesAndFtsos(): NonPayableTransactionObject<{
      _supportedIndices: string[];
      _ftsos: string[];
      0: string[];
      1: string[];
    }>;

    getSupportedIndicesAndSymbols(): NonPayableTransactionObject<{
      _supportedIndices: string[];
      _supportedSymbols: string[];
      0: string[];
      1: string[];
    }>;

    getSupportedIndicesSymbolsAndFtsos(): NonPayableTransactionObject<{
      _supportedIndices: string[];
      _supportedSymbols: string[];
      _ftsos: string[];
      0: string[];
      1: string[];
      2: string[];
    }>;

    getSupportedSymbols(): NonPayableTransactionObject<string[]>;

    getSupportedSymbolsAndFtsos(): NonPayableTransactionObject<{
      _supportedSymbols: string[];
      _ftsos: string[];
      0: string[];
      1: string[];
    }>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
