/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface BokkyPooBahsDateTimeContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BokkyPooBahsDateTimeContract;
  clone(): BokkyPooBahsDateTimeContract;
  methods: {
    _daysFromDate(
      year: number | string | BN,
      month: number | string | BN,
      day: number | string | BN
    ): NonPayableTransactionObject<string>;

    _daysToDate(_days: number | string | BN): NonPayableTransactionObject<{
      year: string;
      month: string;
      day: string;
      0: string;
      1: string;
      2: string;
    }>;

    _getDaysInMonth(
      year: number | string | BN,
      month: number | string | BN
    ): NonPayableTransactionObject<string>;

    _isLeapYear(
      year: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    _now(): NonPayableTransactionObject<string>;

    _nowDateTime(): NonPayableTransactionObject<{
      year: string;
      month: string;
      day: string;
      hour: string;
      minute: string;
      second: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    addDays(
      timestamp: number | string | BN,
      _days: number | string | BN
    ): NonPayableTransactionObject<string>;

    addHours(
      timestamp: number | string | BN,
      _hours: number | string | BN
    ): NonPayableTransactionObject<string>;

    addMinutes(
      timestamp: number | string | BN,
      _minutes: number | string | BN
    ): NonPayableTransactionObject<string>;

    addMonths(
      timestamp: number | string | BN,
      _months: number | string | BN
    ): NonPayableTransactionObject<string>;

    addSeconds(
      timestamp: number | string | BN,
      _seconds: number | string | BN
    ): NonPayableTransactionObject<string>;

    addYears(
      timestamp: number | string | BN,
      _years: number | string | BN
    ): NonPayableTransactionObject<string>;

    diffDays(
      fromTimestamp: number | string | BN,
      toTimestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    diffHours(
      fromTimestamp: number | string | BN,
      toTimestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    diffMinutes(
      fromTimestamp: number | string | BN,
      toTimestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    diffMonths(
      fromTimestamp: number | string | BN,
      toTimestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    diffSeconds(
      fromTimestamp: number | string | BN,
      toTimestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    diffYears(
      fromTimestamp: number | string | BN,
      toTimestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDay(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDayOfWeek(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDaysInMonth(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDaysInYear(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getHour(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getMinute(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getMonth(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getSecond(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getYear(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    isLeapYear(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isValidDate(
      year: number | string | BN,
      month: number | string | BN,
      day: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isValidDateTime(
      year: number | string | BN,
      month: number | string | BN,
      day: number | string | BN,
      hour: number | string | BN,
      minute: number | string | BN,
      second: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isWeekDay(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isWeekEnd(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    subDays(
      timestamp: number | string | BN,
      _days: number | string | BN
    ): NonPayableTransactionObject<string>;

    subHours(
      timestamp: number | string | BN,
      _hours: number | string | BN
    ): NonPayableTransactionObject<string>;

    subMinutes(
      timestamp: number | string | BN,
      _minutes: number | string | BN
    ): NonPayableTransactionObject<string>;

    subSeconds(
      timestamp: number | string | BN,
      _seconds: number | string | BN
    ): NonPayableTransactionObject<string>;

    timestampFromDate(
      year: number | string | BN,
      month: number | string | BN,
      day: number | string | BN
    ): NonPayableTransactionObject<string>;

    timestampFromDateTime(
      year: number | string | BN,
      month: number | string | BN,
      day: number | string | BN,
      hour: number | string | BN,
      minute: number | string | BN,
      second: number | string | BN
    ): NonPayableTransactionObject<string>;

    timestampToDate(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<{
      year: string;
      month: string;
      day: string;
      0: string;
      1: string;
      2: string;
    }>;

    timestampToDateTime(
      timestamp: number | string | BN
    ): NonPayableTransactionObject<{
      year: string;
      month: string;
      day: string;
      hour: string;
      minute: string;
      second: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
