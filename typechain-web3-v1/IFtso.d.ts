/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LowTurnout = ContractEventLog<{
  epochId: string;
  natTurnout: string;
  lowNatTurnoutThresholdBIPS: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PriceEpochInitializedOnFtso = ContractEventLog<{
  epochId: string;
  endTime: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type PriceFinalized = ContractEventLog<{
  epochId: string;
  price: string;
  rewardedFtso: boolean;
  lowRewardPrice: string;
  highRewardPrice: string;
  finalizationType: string;
  timestamp: string;
  0: string;
  1: string;
  2: boolean;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type PriceRevealed = ContractEventLog<{
  voter: string;
  epochId: string;
  price: string;
  timestamp: string;
  votePowerNat: string;
  votePowerAsset: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface IFtso extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IFtso;
  clone(): IFtso;
  methods: {
    active(): NonPayableTransactionObject<boolean>;

    getCurrentEpochId(): NonPayableTransactionObject<string>;

    getCurrentPrice(): NonPayableTransactionObject<{
      _price: string;
      _timestamp: string;
      0: string;
      1: string;
    }>;

    getCurrentPriceDetails(): NonPayableTransactionObject<{
      _price: string;
      _priceTimestamp: string;
      _priceFinalizationType: string;
      _lastPriceEpochFinalizationTimestamp: string;
      _lastPriceEpochFinalizationType: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    getCurrentRandom(): NonPayableTransactionObject<string>;

    getEpochId(
      _timestamp: number | string | BN
    ): NonPayableTransactionObject<string>;

    getEpochPrice(
      _epochId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getEpochPriceForVoter(
      _epochId: number | string | BN,
      _voter: string
    ): NonPayableTransactionObject<string>;

    getPriceEpochConfiguration(): NonPayableTransactionObject<{
      _firstEpochStartTs: string;
      _submitPeriodSeconds: string;
      _revealPeriodSeconds: string;
      0: string;
      1: string;
      2: string;
    }>;

    getPriceEpochData(): NonPayableTransactionObject<{
      _epochId: string;
      _epochSubmitEndTime: string;
      _epochRevealEndTime: string;
      _votePowerBlock: string;
      _fallbackMode: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    getRandom(
      _epochId: number | string | BN
    ): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;
  };
  events: {
    LowTurnout(cb?: Callback<LowTurnout>): EventEmitter;
    LowTurnout(options?: EventOptions, cb?: Callback<LowTurnout>): EventEmitter;

    PriceEpochInitializedOnFtso(
      cb?: Callback<PriceEpochInitializedOnFtso>
    ): EventEmitter;
    PriceEpochInitializedOnFtso(
      options?: EventOptions,
      cb?: Callback<PriceEpochInitializedOnFtso>
    ): EventEmitter;

    PriceFinalized(cb?: Callback<PriceFinalized>): EventEmitter;
    PriceFinalized(
      options?: EventOptions,
      cb?: Callback<PriceFinalized>
    ): EventEmitter;

    PriceRevealed(cb?: Callback<PriceRevealed>): EventEmitter;
    PriceRevealed(
      options?: EventOptions,
      cb?: Callback<PriceRevealed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LowTurnout", cb: Callback<LowTurnout>): void;
  once(
    event: "LowTurnout",
    options: EventOptions,
    cb: Callback<LowTurnout>
  ): void;

  once(
    event: "PriceEpochInitializedOnFtso",
    cb: Callback<PriceEpochInitializedOnFtso>
  ): void;
  once(
    event: "PriceEpochInitializedOnFtso",
    options: EventOptions,
    cb: Callback<PriceEpochInitializedOnFtso>
  ): void;

  once(event: "PriceFinalized", cb: Callback<PriceFinalized>): void;
  once(
    event: "PriceFinalized",
    options: EventOptions,
    cb: Callback<PriceFinalized>
  ): void;

  once(event: "PriceRevealed", cb: Callback<PriceRevealed>): void;
  once(
    event: "PriceRevealed",
    options: EventOptions,
    cb: Callback<PriceRevealed>
  ): void;
}
