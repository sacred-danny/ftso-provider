/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DelegateChanged = ContractEventLog<{
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
  0: string;
  1: string;
  2: string;
}>;
export type DelegateVotesChanged = ContractEventLog<{
  delegate: string;
  previousBalance: string;
  newBalance: string;
  0: string;
  1: string;
  2: string;
}>;

export interface IIGovernanceVotePower extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IIGovernanceVotePower;
  clone(): IIGovernanceVotePower;
  methods: {
    delegate(_to: string): NonPayableTransactionObject<void>;

    getCleanupBlockNumber(): NonPayableTransactionObject<string>;

    getDelegateOfAt(
      _who: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDelegateOfAtNow(_who: string): NonPayableTransactionObject<string>;

    getVotes(account: string): NonPayableTransactionObject<string>;

    ownerToken(): NonPayableTransactionObject<string>;

    setCleanerContract(
      _cleanerContract: string
    ): NonPayableTransactionObject<void>;

    setCleanupBlockNumber(
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<void>;

    undelegate(): NonPayableTransactionObject<void>;

    updateAtTokenTransfer(
      _from: string,
      _to: string,
      _fromBalance: number | string | BN,
      _toBalance: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    votePowerOfAt(
      _who: string,
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    DelegateChanged(cb?: Callback<DelegateChanged>): EventEmitter;
    DelegateChanged(
      options?: EventOptions,
      cb?: Callback<DelegateChanged>
    ): EventEmitter;

    DelegateVotesChanged(cb?: Callback<DelegateVotesChanged>): EventEmitter;
    DelegateVotesChanged(
      options?: EventOptions,
      cb?: Callback<DelegateVotesChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DelegateChanged", cb: Callback<DelegateChanged>): void;
  once(
    event: "DelegateChanged",
    options: EventOptions,
    cb: Callback<DelegateChanged>
  ): void;

  once(event: "DelegateVotesChanged", cb: Callback<DelegateVotesChanged>): void;
  once(
    event: "DelegateVotesChanged",
    options: EventOptions,
    cb: Callback<DelegateVotesChanged>
  ): void;
}
