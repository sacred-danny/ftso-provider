/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type VoterRemovedFromWhitelist = ContractEventLog<{
  voter: string;
  ftsoIndex: string;
  0: string;
  1: string;
}>;
export type VoterWhitelisted = ContractEventLog<{
  voter: string;
  ftsoIndex: string;
  0: string;
  1: string;
}>;

export interface MockVoterWhitelister extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MockVoterWhitelister;
  clone(): MockVoterWhitelister;
  methods: {
    addFtso(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    defaultMaxVotersForFtso(): NonPayableTransactionObject<string>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string
    ): NonPayableTransactionObject<string[]>;

    maxVotersForFtso(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    requestFullVoterWhitelisting(_voter: string): NonPayableTransactionObject<{
      _supportedIndices: string[];
      _success: boolean[];
      0: string[];
      1: boolean[];
    }>;

    requestWhitelistingVoter(
      _voter: string,
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFtsoRegistry(_ftsoRegistry: string): NonPayableTransactionObject<void>;
  };
  events: {
    VoterRemovedFromWhitelist(
      cb?: Callback<VoterRemovedFromWhitelist>
    ): EventEmitter;
    VoterRemovedFromWhitelist(
      options?: EventOptions,
      cb?: Callback<VoterRemovedFromWhitelist>
    ): EventEmitter;

    VoterWhitelisted(cb?: Callback<VoterWhitelisted>): EventEmitter;
    VoterWhitelisted(
      options?: EventOptions,
      cb?: Callback<VoterWhitelisted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "VoterRemovedFromWhitelist",
    cb: Callback<VoterRemovedFromWhitelist>
  ): void;
  once(
    event: "VoterRemovedFromWhitelist",
    options: EventOptions,
    cb: Callback<VoterRemovedFromWhitelist>
  ): void;

  once(event: "VoterWhitelisted", cb: Callback<VoterWhitelisted>): void;
  once(
    event: "VoterWhitelisted",
    options: EventOptions,
    cb: Callback<VoterWhitelisted>
  ): void;
}
