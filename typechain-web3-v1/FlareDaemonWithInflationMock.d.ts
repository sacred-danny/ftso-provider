/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type InflationSet = ContractEventLog<{
  theNewContract: string;
  theOldContract: string;
  0: string;
  1: string;
}>;
export type MintingRequestReceived = ContractEventLog<{
  amountWei: string;
  0: string;
}>;

export interface FlareDaemonWithInflationMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FlareDaemonWithInflationMock;
  clone(): FlareDaemonWithInflationMock;
  methods: {
    claimGovernance(): NonPayableTransactionObject<void>;

    governance(): NonPayableTransactionObject<string>;

    inflation(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    initialiseFixedAddress(): NonPayableTransactionObject<string>;

    lastMintRequestTs(): NonPayableTransactionObject<string>;

    lastUpdateMaxMintRequestTs(): NonPayableTransactionObject<string>;

    maxMintingRequestWei(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    requestMinting(
      _amountWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    setInflation(_inflation: string): NonPayableTransactionObject<void>;

    totalMintingRequestedWei(): NonPayableTransactionObject<string>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    triggerDaemonize(): NonPayableTransactionObject<void>;

    triggerReceiveMinting(
      _toMint: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    InflationSet(cb?: Callback<InflationSet>): EventEmitter;
    InflationSet(
      options?: EventOptions,
      cb?: Callback<InflationSet>
    ): EventEmitter;

    MintingRequestReceived(cb?: Callback<MintingRequestReceived>): EventEmitter;
    MintingRequestReceived(
      options?: EventOptions,
      cb?: Callback<MintingRequestReceived>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(event: "InflationSet", cb: Callback<InflationSet>): void;
  once(
    event: "InflationSet",
    options: EventOptions,
    cb: Callback<InflationSet>
  ): void;

  once(
    event: "MintingRequestReceived",
    cb: Callback<MintingRequestReceived>
  ): void;
  once(
    event: "MintingRequestReceived",
    options: EventOptions,
    cb: Callback<MintingRequestReceived>
  ): void;
}
