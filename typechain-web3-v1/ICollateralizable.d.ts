/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ICollateralizable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ICollateralizable;
  clone(): ICollateralizable;
  methods: {
    addRewardToAgentPosition(
      epochID: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    assetRedemptionRequest(
      amount: number | string | BN,
      assetAddress: string | number[]
    ): NonPayableTransactionObject<{
      redemptionId: string;
      agents: string[];
      assetAmounts: string[];
      0: string;
      1: string[];
      2: string[];
    }>;

    deposit(
      amount: number | string | BN,
      freshMint: number | string | BN,
      agentPosition: number | string | BN,
      freshMintMinRatio: number | string | BN,
      natAddress: string,
      handling: number | string | BN
    ): NonPayableTransactionObject<void>;

    mintRequest(
      mintAmountTwei: number | string | BN,
      mintDestination: string,
      underlyingAddress: string | number[]
    ): NonPayableTransactionObject<{
      mintRequestId: string;
      agents: string[];
      assetAmounts: string[];
      assetAddress: string[];
      0: string;
      1: string[];
      2: string[];
      3: string[];
    }>;

    proveMintPayment(
      mintRequestId: number | string | BN,
      minterSourceAddress: string | number[],
      agentAssetAddress: string | number[],
      destinationTag: string | number[],
      assetAmount: number | string | BN,
      merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<string>;

    proveRedemptionPayment(
      redemptionRequestId: number | string | BN,
      agentSourceAssetAddress: string | number[],
      redeemerAssetAddress: string | number[],
      destinationTag: string | number[],
      assetAmount: number | string | BN,
      merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
