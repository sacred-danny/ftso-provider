/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CreateDelegationAccount = ContractEventLog<{
  delegationAccount: string;
  owner: string;
  0: string;
  1: string;
}>;
export type SetLibraryAddress = ContractEventLog<{
  libraryAddress: string;
  0: string;
}>;

export interface IDelegationAccountManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IDelegationAccountManager;
  clone(): IDelegationAccountManager;
  methods: {
    createDelegationAccount(): NonPayableTransactionObject<string>;

    getDistributions(): NonPayableTransactionObject<string[]>;

    getFtsoRewardManagers(): NonPayableTransactionObject<string[]>;

    setLibraryAddress(
      _libraryAddress: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CreateDelegationAccount(
      cb?: Callback<CreateDelegationAccount>
    ): EventEmitter;
    CreateDelegationAccount(
      options?: EventOptions,
      cb?: Callback<CreateDelegationAccount>
    ): EventEmitter;

    SetLibraryAddress(cb?: Callback<SetLibraryAddress>): EventEmitter;
    SetLibraryAddress(
      options?: EventOptions,
      cb?: Callback<SetLibraryAddress>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "CreateDelegationAccount",
    cb: Callback<CreateDelegationAccount>
  ): void;
  once(
    event: "CreateDelegationAccount",
    options: EventOptions,
    cb: Callback<CreateDelegationAccount>
  ): void;

  once(event: "SetLibraryAddress", cb: Callback<SetLibraryAddress>): void;
  once(
    event: "SetLibraryAddress",
    options: EventOptions,
    cb: Callback<SetLibraryAddress>
  ): void;
}
