/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DailyAuthorizedInflationSet = ContractEventLog<{
  authorizedAmountWei: string;
  0: string;
}>;
export type FeePercentageChanged = ContractEventLog<{
  dataProvider: string;
  value: string;
  validFromEpoch: string;
  0: string;
  1: string;
  2: string;
}>;
export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type InflationReceived = ContractEventLog<{
  amountReceivedWei: string;
  0: string;
}>;
export type RewardClaimed = ContractEventLog<{
  dataProvider: string;
  whoClaimed: string;
  sentTo: string;
  rewardEpoch: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RewardClaimsExpired = ContractEventLog<{
  rewardEpochId: string;
  0: string;
}>;
export type RewardsBurned = ContractEventLog<{
  amountBurnedWei: string;
  0: string;
}>;
export type RewardsDistributed = ContractEventLog<{
  ftso: string;
  epochId: string;
  addresses: string[];
  rewards: string[];
  0: string;
  1: string;
  2: string[];
  3: string[];
}>;
export type UnearnedRewardsAccrued = ContractEventLog<{
  epochId: string;
  reward: string;
  0: string;
  1: string;
}>;

export interface FtsoRewardManager extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FtsoRewardManager;
  clone(): FtsoRewardManager;
  methods: {
    accrueUnearnedRewards(
      _epochId: number | string | BN,
      _priceEpochDurationSeconds: number | string | BN,
      _priceEpochEndTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    activate(): NonPayableTransactionObject<void>;

    active(): NonPayableTransactionObject<boolean>;

    addClaimExecutor(_executor: string): NonPayableTransactionObject<void>;

    claimAndWrapReward(
      _recipient: string,
      _rewardEpochs: (number | string | BN)[]
    ): NonPayableTransactionObject<string>;

    claimAndWrapRewardFromDataProviders(
      _recipient: string,
      _rewardEpochs: (number | string | BN)[],
      _dataProviders: string[]
    ): NonPayableTransactionObject<string>;

    claimAndWrapRewardFromDataProvidersToOwner(
      _rewardOwner: string,
      _rewardEpochs: (number | string | BN)[],
      _dataProviders: string[]
    ): NonPayableTransactionObject<string>;

    claimAndWrapRewardToOwner(
      _rewardOwner: string,
      _rewardEpochs: (number | string | BN)[]
    ): NonPayableTransactionObject<string>;

    claimGovernance(): NonPayableTransactionObject<void>;

    claimReward(
      _recipient: string,
      _rewardEpochs: (number | string | BN)[]
    ): NonPayableTransactionObject<string>;

    claimRewardFromDataProviders(
      _recipient: string,
      _rewardEpochs: (number | string | BN)[],
      _dataProviders: string[]
    ): NonPayableTransactionObject<string>;

    closeExpiredRewardEpoch(
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<void>;

    dailyAuthorizedInflation(): NonPayableTransactionObject<string>;

    deactivate(): NonPayableTransactionObject<void>;

    defaultFeePercentage(): NonPayableTransactionObject<string>;

    distributeRewards(
      _addresses: string[],
      _weights: (number | string | BN)[],
      _totalWeight: number | string | BN,
      _epochId: number | string | BN,
      _ftso: string,
      _priceEpochDurationSeconds: number | string | BN,
      _currentRewardEpoch: number | string | BN,
      _priceEpochEndTime: number | string | BN,
      _votePowerBlock: number | string | BN
    ): NonPayableTransactionObject<void>;

    feePercentageUpdateOffset(): NonPayableTransactionObject<string>;

    ftsoManager(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getClaimedReward(
      _rewardEpoch: number | string | BN,
      _dataProvider: string,
      _claimer: string
    ): NonPayableTransactionObject<{
      _claimed: boolean;
      _amount: string;
      0: boolean;
      1: string;
    }>;

    getContractName(): NonPayableTransactionObject<string>;

    getCurrentRewardEpoch(): NonPayableTransactionObject<string>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: string
    ): NonPayableTransactionObject<string>;

    getDataProviderFeePercentage(
      _dataProvider: string,
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: string
    ): NonPayableTransactionObject<{
      _feePercentageBIPS: string[];
      _validFromEpoch: string[];
      _fixed: boolean[];
      0: string[];
      1: string[];
      2: boolean[];
    }>;

    getEpochReward(
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<{
      _totalReward: string;
      _claimedReward: string;
      0: string;
      1: string;
    }>;

    getEpochsWithClaimableRewards(): NonPayableTransactionObject<{
      _startEpochId: string;
      _endEpochId: string;
      0: string;
      1: string;
    }>;

    getEpochsWithUnclaimedRewards(
      _beneficiary: string
    ): NonPayableTransactionObject<string[]>;

    getInflationAddress(): NonPayableTransactionObject<string>;

    getInitialRewardEpoch(): NonPayableTransactionObject<string>;

    getRewardEpochToExpireNext(): NonPayableTransactionObject<string>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<string>;

    getStateOfRewards(
      _beneficiary: string,
      _rewardEpoch: number | string | BN
    ): NonPayableTransactionObject<{
      _dataProviders: string[];
      _rewardAmounts: string[];
      _claimed: boolean[];
      _claimable: boolean;
      0: string[];
      1: string[];
      2: boolean[];
      3: boolean;
    }>;

    getStateOfRewardsFromDataProviders(
      _beneficiary: string,
      _rewardEpoch: number | string | BN,
      _dataProviders: string[]
    ): NonPayableTransactionObject<{
      _rewardAmounts: string[];
      _claimed: boolean[];
      _claimable: boolean;
      0: string[];
      1: boolean[];
      2: boolean;
    }>;

    getTokenPoolSupplyData(): NonPayableTransactionObject<{
      _lockedFundsWei: string;
      _totalInflationAuthorizedWei: string;
      _totalClaimedWei: string;
      0: string;
      1: string;
      2: string;
    }>;

    getUnclaimedReward(
      _rewardEpoch: number | string | BN,
      _dataProvider: string
    ): NonPayableTransactionObject<{
      _amount: string;
      _weight: string;
      0: string;
      1: string;
    }>;

    governance(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    lastInflationAuthorizationReceivedTs(): NonPayableTransactionObject<string>;

    newFtsoRewardManager(): NonPayableTransactionObject<string>;

    oldFtsoRewardManager(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    receiveInflation(): PayableTransactionObject<void>;

    removeClaimExecutor(_executor: string): NonPayableTransactionObject<void>;

    setDailyAuthorizedInflation(
      _toAuthorizeWei: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: number | string | BN
    ): NonPayableTransactionObject<string>;

    setInitialRewardData(): NonPayableTransactionObject<void>;

    setNewFtsoRewardManager(
      _newFtsoRewardManager: string
    ): NonPayableTransactionObject<void>;

    supply(): NonPayableTransactionObject<string>;

    totalAwardedWei(): NonPayableTransactionObject<string>;

    totalBurnedWei(): NonPayableTransactionObject<string>;

    totalClaimedWei(): NonPayableTransactionObject<string>;

    totalExpiredWei(): NonPayableTransactionObject<string>;

    totalInflationAuthorizedWei(): NonPayableTransactionObject<string>;

    totalInflationReceivedWei(): NonPayableTransactionObject<string>;

    totalSelfDestructReceivedWei(): NonPayableTransactionObject<string>;

    totalUnearnedWei(): NonPayableTransactionObject<string>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;

    wNat(): NonPayableTransactionObject<string>;
  };
  events: {
    DailyAuthorizedInflationSet(
      cb?: Callback<DailyAuthorizedInflationSet>
    ): EventEmitter;
    DailyAuthorizedInflationSet(
      options?: EventOptions,
      cb?: Callback<DailyAuthorizedInflationSet>
    ): EventEmitter;

    FeePercentageChanged(cb?: Callback<FeePercentageChanged>): EventEmitter;
    FeePercentageChanged(
      options?: EventOptions,
      cb?: Callback<FeePercentageChanged>
    ): EventEmitter;

    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    InflationReceived(cb?: Callback<InflationReceived>): EventEmitter;
    InflationReceived(
      options?: EventOptions,
      cb?: Callback<InflationReceived>
    ): EventEmitter;

    RewardClaimed(cb?: Callback<RewardClaimed>): EventEmitter;
    RewardClaimed(
      options?: EventOptions,
      cb?: Callback<RewardClaimed>
    ): EventEmitter;

    RewardClaimsExpired(cb?: Callback<RewardClaimsExpired>): EventEmitter;
    RewardClaimsExpired(
      options?: EventOptions,
      cb?: Callback<RewardClaimsExpired>
    ): EventEmitter;

    RewardsBurned(cb?: Callback<RewardsBurned>): EventEmitter;
    RewardsBurned(
      options?: EventOptions,
      cb?: Callback<RewardsBurned>
    ): EventEmitter;

    RewardsDistributed(cb?: Callback<RewardsDistributed>): EventEmitter;
    RewardsDistributed(
      options?: EventOptions,
      cb?: Callback<RewardsDistributed>
    ): EventEmitter;

    UnearnedRewardsAccrued(cb?: Callback<UnearnedRewardsAccrued>): EventEmitter;
    UnearnedRewardsAccrued(
      options?: EventOptions,
      cb?: Callback<UnearnedRewardsAccrued>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "DailyAuthorizedInflationSet",
    cb: Callback<DailyAuthorizedInflationSet>
  ): void;
  once(
    event: "DailyAuthorizedInflationSet",
    options: EventOptions,
    cb: Callback<DailyAuthorizedInflationSet>
  ): void;

  once(event: "FeePercentageChanged", cb: Callback<FeePercentageChanged>): void;
  once(
    event: "FeePercentageChanged",
    options: EventOptions,
    cb: Callback<FeePercentageChanged>
  ): void;

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(event: "InflationReceived", cb: Callback<InflationReceived>): void;
  once(
    event: "InflationReceived",
    options: EventOptions,
    cb: Callback<InflationReceived>
  ): void;

  once(event: "RewardClaimed", cb: Callback<RewardClaimed>): void;
  once(
    event: "RewardClaimed",
    options: EventOptions,
    cb: Callback<RewardClaimed>
  ): void;

  once(event: "RewardClaimsExpired", cb: Callback<RewardClaimsExpired>): void;
  once(
    event: "RewardClaimsExpired",
    options: EventOptions,
    cb: Callback<RewardClaimsExpired>
  ): void;

  once(event: "RewardsBurned", cb: Callback<RewardsBurned>): void;
  once(
    event: "RewardsBurned",
    options: EventOptions,
    cb: Callback<RewardsBurned>
  ): void;

  once(event: "RewardsDistributed", cb: Callback<RewardsDistributed>): void;
  once(
    event: "RewardsDistributed",
    options: EventOptions,
    cb: Callback<RewardsDistributed>
  ): void;

  once(
    event: "UnearnedRewardsAccrued",
    cb: Callback<UnearnedRewardsAccrued>
  ): void;
  once(
    event: "UnearnedRewardsAccrued",
    options: EventOptions,
    cb: Callback<UnearnedRewardsAccrued>
  ): void;
}
