/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GovernanceProposed = ContractEventLog<{
  proposedGovernance: string;
  0: string;
}>;
export type GovernanceUpdated = ContractEventLog<{
  oldGovernance: string;
  newGoveranance: string;
  0: string;
  1: string;
}>;
export type VoterRemovedFromWhitelist = ContractEventLog<{
  voter: string;
  ftsoIndex: string;
  0: string;
  1: string;
}>;
export type VoterWhitelisted = ContractEventLog<{
  voter: string;
  ftsoIndex: string;
  0: string;
  1: string;
}>;

export interface VoterWhitelisterMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): VoterWhitelisterMock;
  clone(): VoterWhitelisterMock;
  methods: {
    addFtso(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    claimGovernance(): NonPayableTransactionObject<void>;

    defaultMaxVotersForFtso(): NonPayableTransactionObject<string>;

    ftsoManager(): NonPayableTransactionObject<string>;

    ftsoRegistry(): NonPayableTransactionObject<string>;

    getAddressUpdater(): NonPayableTransactionObject<string>;

    getAssetVotePowerWeights(
      _assets: string[],
      _assetMultipliers: (number | string | BN)[],
      _totalVotePowerAsset: number | string | BN,
      _addresses: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getFtsoWhitelistedPriceProviders(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getFtsoWhitelistedPriceProvidersBySymbol(
      _symbol: string
    ): NonPayableTransactionObject<string[]>;

    getNativeVotePowerWeights(
      _wNat: string,
      _totalVotePowerNat: number | string | BN,
      _addresses: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getVotePowerWeights(
      ftso: string,
      _addresses: string[]
    ): NonPayableTransactionObject<string[]>;

    getVotePowers(
      _token: string,
      _addresses: string[],
      _blockNumber: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    governance(): NonPayableTransactionObject<string>;

    initialise(_governance: string): NonPayableTransactionObject<void>;

    maxVotersForFtso(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    minVotePowerIndex(
      _addresses: string[],
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    priceSubmitter(): NonPayableTransactionObject<string>;

    proposeGovernance(_governance: string): NonPayableTransactionObject<void>;

    proposedGovernance(): NonPayableTransactionObject<string>;

    removeFtso(
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    removeTrustedAddressFromWhitelist(
      _trustedAddress: string,
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    requestFullVoterWhitelisting(_voter: string): NonPayableTransactionObject<{
      _supportedIndices: string[];
      _success: boolean[];
      0: string[];
      1: boolean[];
    }>;

    requestWhitelistingVoter(
      _voter: string,
      _ftsoIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDefaultMaxVotersForFtso(
      _defaultMaxVotersForFtso: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxVotersForFtso(
      _ftsoIndex: number | string | BN,
      _newMaxVoters: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferGovernance(_governance: string): NonPayableTransactionObject<void>;

    updateContractAddresses(
      _contractNameHashes: (string | number[])[],
      _contractAddresses: string[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    GovernanceProposed(cb?: Callback<GovernanceProposed>): EventEmitter;
    GovernanceProposed(
      options?: EventOptions,
      cb?: Callback<GovernanceProposed>
    ): EventEmitter;

    GovernanceUpdated(cb?: Callback<GovernanceUpdated>): EventEmitter;
    GovernanceUpdated(
      options?: EventOptions,
      cb?: Callback<GovernanceUpdated>
    ): EventEmitter;

    VoterRemovedFromWhitelist(
      cb?: Callback<VoterRemovedFromWhitelist>
    ): EventEmitter;
    VoterRemovedFromWhitelist(
      options?: EventOptions,
      cb?: Callback<VoterRemovedFromWhitelist>
    ): EventEmitter;

    VoterWhitelisted(cb?: Callback<VoterWhitelisted>): EventEmitter;
    VoterWhitelisted(
      options?: EventOptions,
      cb?: Callback<VoterWhitelisted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "GovernanceProposed", cb: Callback<GovernanceProposed>): void;
  once(
    event: "GovernanceProposed",
    options: EventOptions,
    cb: Callback<GovernanceProposed>
  ): void;

  once(event: "GovernanceUpdated", cb: Callback<GovernanceUpdated>): void;
  once(
    event: "GovernanceUpdated",
    options: EventOptions,
    cb: Callback<GovernanceUpdated>
  ): void;

  once(
    event: "VoterRemovedFromWhitelist",
    cb: Callback<VoterRemovedFromWhitelist>
  ): void;
  once(
    event: "VoterRemovedFromWhitelist",
    options: EventOptions,
    cb: Callback<VoterRemovedFromWhitelist>
  ): void;

  once(event: "VoterWhitelisted", cb: Callback<VoterWhitelisted>): void;
  once(
    event: "VoterWhitelisted",
    options: EventOptions,
    cb: Callback<VoterWhitelisted>
  ): void;
}
